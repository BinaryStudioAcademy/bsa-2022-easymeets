// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220809165911_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilitySlotId")
                        .HasColumnType("int");

                    b.Property<int>("BookingScheduleBlockingTimeMeetingInHours")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("PaddingBeforeMeeting")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 1,
                            AvailabilitySlotId = 1,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 7,
                            CreatedAt = new DateTime(2020, 8, 21, 22, 30, 20, 675, DateTimeKind.Unspecified).AddTicks(577),
                            Days = 28,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            PaddingBeforeMeeting = 13,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = 3,
                            AvailabilitySlotId = 2,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 2,
                            CreatedAt = new DateTime(2020, 9, 21, 6, 28, 58, 873, DateTimeKind.Unspecified).AddTicks(9237),
                            Days = 21,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            PaddingBeforeMeeting = 3,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            ActivityType = 2,
                            AvailabilitySlotId = 3,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 7,
                            CreatedAt = new DateTime(2021, 6, 21, 15, 24, 1, 196, DateTimeKind.Unspecified).AddTicks(7083),
                            Days = 6,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 10,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            ActivityType = 1,
                            AvailabilitySlotId = 4,
                            BookingScheduleBlockingTimeMeetingInHours = 3,
                            Color = 5,
                            CreatedAt = new DateTime(2019, 12, 27, 5, 34, 33, 193, DateTimeKind.Unspecified).AddTicks(9415),
                            Days = 22,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            PaddingBeforeMeeting = 13,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            ActivityType = 2,
                            AvailabilitySlotId = 5,
                            BookingScheduleBlockingTimeMeetingInHours = 3,
                            Color = 5,
                            CreatedAt = new DateTime(2021, 2, 15, 20, 33, 10, 559, DateTimeKind.Unspecified).AddTicks(1966),
                            Days = 1,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            PaddingBeforeMeeting = 2,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            ActivityType = 1,
                            AvailabilitySlotId = 6,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 7,
                            CreatedAt = new DateTime(2019, 11, 20, 18, 10, 46, 663, DateTimeKind.Unspecified).AddTicks(2002),
                            Days = 2,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            PaddingBeforeMeeting = 7,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            ActivityType = 3,
                            AvailabilitySlotId = 7,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 2,
                            CreatedAt = new DateTime(2019, 12, 27, 18, 46, 36, 775, DateTimeKind.Unspecified).AddTicks(3384),
                            Days = 30,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            PaddingBeforeMeeting = 13,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            ActivityType = 1,
                            AvailabilitySlotId = 8,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 6,
                            CreatedAt = new DateTime(2019, 11, 4, 13, 54, 43, 796, DateTimeKind.Unspecified).AddTicks(7269),
                            Days = 14,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 9,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            ActivityType = 1,
                            AvailabilitySlotId = 9,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 8,
                            CreatedAt = new DateTime(2021, 2, 14, 5, 19, 54, 202, DateTimeKind.Unspecified).AddTicks(8710),
                            Days = 24,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            ActivityType = 3,
                            AvailabilitySlotId = 10,
                            BookingScheduleBlockingTimeMeetingInHours = 2,
                            Color = 2,
                            CreatedAt = new DateTime(2020, 4, 7, 2, 31, 59, 931, DateTimeKind.Unspecified).AddTicks(9036),
                            Days = 9,
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdvancedSlotSettingsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvancedSlotSettingsId = 1,
                            CreatedAt = new DateTime(2020, 2, 27, 6, 16, 49, 225, DateTimeKind.Unspecified).AddTicks(3627),
                            CreatedBy = 1,
                            Description = "Est dolorem voluptatum nam magnam necessitatibus necessitatibus velit sapiente. Numquam deleniti sapiente aut sunt omnis laboriosam quaerat quisquam. Consequatur nam laborum. Quas voluptatibus quidem ut.",
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://alanis.info",
                            LocationId = 4,
                            Name = "quaerat",
                            Size = 46,
                            TeamId = 10,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            AdvancedSlotSettingsId = 2,
                            CreatedAt = new DateTime(2020, 7, 12, 9, 9, 3, 32, DateTimeKind.Unspecified).AddTicks(8892),
                            CreatedBy = 2,
                            Description = "Omnis reiciendis ex debitis vitae consequuntur ratione.",
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://katelin.biz",
                            LocationId = 1,
                            Name = "consequuntur",
                            Size = 52,
                            TeamId = 8,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            AdvancedSlotSettingsId = 3,
                            CreatedAt = new DateTime(2020, 9, 4, 20, 26, 30, 130, DateTimeKind.Unspecified).AddTicks(21),
                            CreatedBy = 3,
                            Description = "Cum unde ab soluta architecto vel facere rerum.",
                            Frequency = 30,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://maia.name",
                            LocationId = 5,
                            Name = "harum",
                            Size = 19,
                            TeamId = 5,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            AdvancedSlotSettingsId = 4,
                            CreatedAt = new DateTime(2020, 3, 14, 0, 24, 53, 924, DateTimeKind.Unspecified).AddTicks(957),
                            CreatedBy = 4,
                            Description = "Aliquam sunt voluptate aliquid omnis consectetur cupiditate non dicta.",
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://deshawn.net",
                            LocationId = 2,
                            Name = "repellat",
                            Size = 19,
                            TeamId = 2,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            AdvancedSlotSettingsId = 5,
                            CreatedAt = new DateTime(2020, 2, 20, 15, 49, 22, 526, DateTimeKind.Unspecified).AddTicks(7902),
                            CreatedBy = 5,
                            Description = "Corporis quas est deserunt consequatur fugiat et laborum. Rerum autem veniam tenetur. Et reiciendis vel. Eligendi odio est saepe accusamus dolores est alias.",
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://tabitha.name",
                            LocationId = 5,
                            Name = "dolore",
                            Size = 36,
                            TeamId = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            AdvancedSlotSettingsId = 6,
                            CreatedAt = new DateTime(2019, 7, 30, 10, 48, 47, 133, DateTimeKind.Unspecified).AddTicks(1606),
                            CreatedBy = 6,
                            Description = "cupiditate",
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://lonnie.net",
                            LocationId = 4,
                            Name = "veniam",
                            Size = 38,
                            TeamId = 9,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            AdvancedSlotSettingsId = 7,
                            CreatedAt = new DateTime(2019, 12, 27, 15, 48, 50, 850, DateTimeKind.Unspecified).AddTicks(1048),
                            CreatedBy = 7,
                            Description = "Voluptas saepe id rerum et iure.",
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://kamren.info",
                            LocationId = 3,
                            Name = "velit",
                            Size = 16,
                            TeamId = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            AdvancedSlotSettingsId = 8,
                            CreatedAt = new DateTime(2020, 12, 22, 21, 44, 28, 932, DateTimeKind.Unspecified).AddTicks(8776),
                            CreatedBy = 8,
                            Description = "ipsa",
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://cristian.info",
                            LocationId = 3,
                            Name = "sit",
                            Size = 17,
                            TeamId = 4,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            AdvancedSlotSettingsId = 9,
                            CreatedAt = new DateTime(2020, 3, 12, 10, 18, 28, 53, DateTimeKind.Unspecified).AddTicks(5772),
                            CreatedBy = 9,
                            Description = "Cumque eligendi sint iste doloribus perferendis qui.",
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://cassidy.com",
                            LocationId = 5,
                            Name = "eveniet",
                            Size = 45,
                            TeamId = 8,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            AdvancedSlotSettingsId = 10,
                            CreatedAt = new DateTime(2020, 3, 12, 14, 49, 18, 611, DateTimeKind.Unspecified).AddTicks(9808),
                            CreatedBy = 10,
                            Description = "Vel id dolor labore facilis unde praesentium et.",
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://otilia.com",
                            LocationId = 1,
                            Name = "ullam",
                            Size = 34,
                            TeamId = 5,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddEventsFromTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddEventsFromTeamId = 4,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 19, 22, 37, 39, 736, DateTimeKind.Unspecified).AddTicks(3124),
                            CreatedBy = 5,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            AddEventsFromTeamId = 10,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 1, 26, 18, 17, 5, 670, DateTimeKind.Unspecified).AddTicks(7009),
                            CreatedBy = 6,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            AddEventsFromTeamId = 2,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 4, 22, 19, 4, 41, 512, DateTimeKind.Unspecified).AddTicks(3024),
                            CreatedBy = 10,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            AddEventsFromTeamId = 7,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 29, 2, 44, 38, 463, DateTimeKind.Unspecified).AddTicks(6962),
                            CreatedBy = 8,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            AddEventsFromTeamId = 4,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 6, 22, 11, 2, 13, 822, DateTimeKind.Unspecified).AddTicks(4426),
                            CreatedBy = 10,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            AddEventsFromTeamId = 5,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 7, 15, 2, 57, 45, 481, DateTimeKind.Unspecified).AddTicks(6210),
                            CreatedBy = 2,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            AddEventsFromTeamId = 7,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 10, 13, 0, 12, 25, 784, DateTimeKind.Unspecified).AddTicks(4207),
                            CreatedBy = 4,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            AddEventsFromTeamId = 4,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 1, 26, 1, 54, 6, 412, DateTimeKind.Unspecified).AddTicks(7292),
                            CreatedBy = 6,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            AddEventsFromTeamId = 2,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 6, 17, 8, 28, 10, 529, DateTimeKind.Unspecified).AddTicks(5684),
                            CreatedBy = 2,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            AddEventsFromTeamId = 4,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 25, 9, 11, 7, 945, DateTimeKind.Unspecified).AddTicks(5888),
                            CreatedBy = 3,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<int>("CalendarId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("CalendarId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            CalendarId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            CalendarId = 2,
                            TeamId = 2
                        },
                        new
                        {
                            CalendarId = 3,
                            TeamId = 3
                        },
                        new
                        {
                            CalendarId = 4,
                            TeamId = 4
                        },
                        new
                        {
                            CalendarId = 5,
                            TeamId = 5
                        },
                        new
                        {
                            CalendarId = 6,
                            TeamId = 6
                        },
                        new
                        {
                            CalendarId = 7,
                            TeamId = 7
                        },
                        new
                        {
                            CalendarId = 8,
                            TeamId = 8
                        },
                        new
                        {
                            CalendarId = 9,
                            TeamId = 9
                        },
                        new
                        {
                            CalendarId = 10,
                            TeamId = 10
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailabilitySlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilitySlotId = 4,
                            CreatedAt = new DateTime(2019, 9, 3, 14, 43, 30, 238, DateTimeKind.Unspecified).AddTicks(6616),
                            Email = "Elmer_Stoltenberg@gmail.com",
                            EventTime = new DateTime(2023, 7, 30, 4, 51, 32, 518, DateTimeKind.Local).AddTicks(8599),
                            IsDeleted = false,
                            Name = "Elmer Stoltenberg",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            AvailabilitySlotId = 5,
                            CreatedAt = new DateTime(2021, 1, 4, 9, 41, 49, 928, DateTimeKind.Unspecified).AddTicks(8796),
                            Email = "Oliver.Douglas@yahoo.com",
                            EventTime = new DateTime(2023, 6, 2, 3, 8, 43, 854, DateTimeKind.Local).AddTicks(5035),
                            IsDeleted = false,
                            Name = "Oliver Douglas",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            AvailabilitySlotId = 6,
                            CreatedAt = new DateTime(2021, 3, 10, 6, 28, 44, 592, DateTimeKind.Unspecified).AddTicks(9213),
                            Email = "Kari_Dare@yahoo.com",
                            EventTime = new DateTime(2022, 8, 18, 7, 47, 55, 673, DateTimeKind.Local).AddTicks(682),
                            IsDeleted = false,
                            Name = "Kari Dare",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            AvailabilitySlotId = 7,
                            CreatedAt = new DateTime(2020, 1, 24, 0, 51, 37, 490, DateTimeKind.Unspecified).AddTicks(4812),
                            Email = "Conrad16@yahoo.com",
                            EventTime = new DateTime(2022, 9, 30, 12, 54, 13, 533, DateTimeKind.Local).AddTicks(2043),
                            IsDeleted = false,
                            Name = "Conrad Powlowski",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            AvailabilitySlotId = 7,
                            CreatedAt = new DateTime(2020, 5, 7, 14, 3, 9, 172, DateTimeKind.Unspecified).AddTicks(1537),
                            Email = "Cristina0@yahoo.com",
                            EventTime = new DateTime(2022, 9, 2, 14, 20, 42, 13, DateTimeKind.Local).AddTicks(688),
                            IsDeleted = false,
                            Name = "Cristina Donnelly",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            AvailabilitySlotId = 6,
                            CreatedAt = new DateTime(2020, 11, 4, 2, 50, 24, 988, DateTimeKind.Unspecified).AddTicks(6986),
                            Email = "Misty.Considine@yahoo.com",
                            EventTime = new DateTime(2023, 3, 17, 5, 14, 32, 939, DateTimeKind.Local).AddTicks(7356),
                            IsDeleted = false,
                            Name = "Misty Considine",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            AvailabilitySlotId = 8,
                            CreatedAt = new DateTime(2020, 7, 18, 13, 28, 14, 916, DateTimeKind.Unspecified).AddTicks(5594),
                            Email = "Anne46@hotmail.com",
                            EventTime = new DateTime(2023, 6, 27, 17, 59, 4, 387, DateTimeKind.Local).AddTicks(7558),
                            IsDeleted = false,
                            Name = "Anne Haag",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            AvailabilitySlotId = 4,
                            CreatedAt = new DateTime(2021, 2, 12, 4, 21, 57, 48, DateTimeKind.Unspecified).AddTicks(181),
                            Email = "Lance_Ryan@yahoo.com",
                            EventTime = new DateTime(2023, 1, 12, 13, 20, 16, 285, DateTimeKind.Local).AddTicks(1469),
                            IsDeleted = false,
                            Name = "Lance Ryan",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            AvailabilitySlotId = 8,
                            CreatedAt = new DateTime(2020, 7, 20, 0, 14, 51, 767, DateTimeKind.Unspecified).AddTicks(1211),
                            Email = "Cory96@gmail.com",
                            EventTime = new DateTime(2022, 8, 16, 0, 31, 17, 767, DateTimeKind.Local).AddTicks(2907),
                            IsDeleted = false,
                            Name = "Cory Cormier",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            AvailabilitySlotId = 7,
                            CreatedAt = new DateTime(2021, 6, 10, 20, 46, 25, 33, DateTimeKind.Unspecified).AddTicks(2382),
                            Email = "Marsha80@yahoo.com",
                            EventTime = new DateTime(2023, 6, 23, 18, 48, 16, 949, DateTimeKind.Local).AddTicks(8450),
                            IsDeleted = false,
                            Name = "Marsha Bernhard",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndEvent")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExternalAttendeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 2, 19, 9, 53, 45, 739, DateTimeKind.Unspecified).AddTicks(6938),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4047),
                            ExternalAttendeeId = 5,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(3893),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 12, 15, 9, 59, 5, 607, DateTimeKind.Unspecified).AddTicks(1712),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4481),
                            ExternalAttendeeId = 9,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4470),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 2, 10, 33, 49, 254, DateTimeKind.Unspecified).AddTicks(9316),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4534),
                            ExternalAttendeeId = 10,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4527),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 8, 22, 18, 58, 16, 368, DateTimeKind.Unspecified).AddTicks(8388),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4579),
                            ExternalAttendeeId = 1,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4572),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2021, 7, 1, 17, 36, 36, 340, DateTimeKind.Unspecified).AddTicks(6551),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4628),
                            ExternalAttendeeId = 7,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4621),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 11, 26, 11, 37, 4, 953, DateTimeKind.Unspecified).AddTicks(7648),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4678),
                            ExternalAttendeeId = 2,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4672),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 12, 27, 9, 30, 59, 184, DateTimeKind.Unspecified).AddTicks(7561),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4706),
                            ExternalAttendeeId = 2,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4700),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 2, 5, 20, 24, 10, 500, DateTimeKind.Unspecified).AddTicks(7399),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4739),
                            ExternalAttendeeId = 3,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4726),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 3, 4, 10, 37, 50, 485, DateTimeKind.Unspecified).AddTicks(614),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4773),
                            ExternalAttendeeId = 5,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4766),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2019, 9, 2, 21, 29, 34, 924, DateTimeKind.Unspecified).AddTicks(2060),
                            EndEvent = new DateTime(2022, 8, 11, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4799),
                            ExternalAttendeeId = 10,
                            IsDeleted = false,
                            StartEvent = new DateTime(2022, 8, 10, 19, 59, 11, 90, DateTimeKind.Local).AddTicks(4793),
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Zoom",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "GoogleMeet",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Discord",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Skype",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Slack",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2019, 8, 13, 11, 0, 56, 621, DateTimeKind.Unspecified).AddTicks(1904),
                            CreatedBy = 4,
                            Description = "eligendi",
                            Duration = 48,
                            IsDeleted = false,
                            LocationId = 1,
                            Name = "est",
                            StartTime = new DateTime(2022, 12, 2, 11, 23, 6, 237, DateTimeKind.Local).AddTicks(1475),
                            TeamId = 8,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 2, 26, 15, 17, 42, 763, DateTimeKind.Unspecified).AddTicks(3964),
                            CreatedBy = 1,
                            Description = "Quas laudantium aut accusantium est aut.",
                            Duration = 28,
                            IsDeleted = false,
                            LocationId = 1,
                            Name = "sed",
                            StartTime = new DateTime(2022, 9, 3, 11, 51, 44, 714, DateTimeKind.Local).AddTicks(6278),
                            TeamId = 6,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 13, 14, 50, 29, 877, DateTimeKind.Unspecified).AddTicks(894),
                            CreatedBy = 5,
                            Description = "Ab voluptatem aut id aspernatur pariatur.",
                            Duration = 41,
                            IsDeleted = false,
                            LocationId = 2,
                            Name = "numquam",
                            StartTime = new DateTime(2023, 7, 27, 0, 35, 44, 202, DateTimeKind.Local).AddTicks(2045),
                            TeamId = 6,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 12, 1, 10, 24, 53, 195, DateTimeKind.Unspecified).AddTicks(7924),
                            CreatedBy = 4,
                            Description = "voluptatem",
                            Duration = 47,
                            IsDeleted = false,
                            LocationId = 5,
                            Name = "asperiores",
                            StartTime = new DateTime(2023, 7, 16, 7, 43, 23, 759, DateTimeKind.Local).AddTicks(8900),
                            TeamId = 9,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2019, 7, 20, 16, 42, 9, 662, DateTimeKind.Unspecified).AddTicks(142),
                            CreatedBy = 2,
                            Description = "Est pariatur autem id minus minima consectetur lab",
                            Duration = 31,
                            IsDeleted = false,
                            LocationId = 1,
                            Name = "aut",
                            StartTime = new DateTime(2023, 6, 30, 4, 11, 16, 551, DateTimeKind.Local).AddTicks(5465),
                            TeamId = 9,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 3, 17, 18, 11, 46, 792, DateTimeKind.Unspecified).AddTicks(2028),
                            CreatedBy = 6,
                            Description = "cum",
                            Duration = 54,
                            IsDeleted = false,
                            LocationId = 4,
                            Name = "numquam",
                            StartTime = new DateTime(2022, 9, 17, 12, 51, 35, 776, DateTimeKind.Local).AddTicks(3027),
                            TeamId = 7,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 8, 5, 18, 40, 3, 149, DateTimeKind.Unspecified).AddTicks(903),
                            CreatedBy = 9,
                            Description = "Ut temporibus veritatis aut illo quia vitae et ut.",
                            Duration = 31,
                            IsDeleted = false,
                            LocationId = 2,
                            Name = "voluptas",
                            StartTime = new DateTime(2023, 6, 21, 11, 44, 5, 350, DateTimeKind.Local).AddTicks(6482),
                            TeamId = 6,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 3, 22, 8, 7, 0, 286, DateTimeKind.Unspecified).AddTicks(5203),
                            CreatedBy = 5,
                            Description = "Et consequuntur et velit et aperiam. Modi cupidita",
                            Duration = 49,
                            IsDeleted = false,
                            LocationId = 2,
                            Name = "repudiandae",
                            StartTime = new DateTime(2022, 11, 6, 19, 50, 59, 285, DateTimeKind.Local).AddTicks(648),
                            TeamId = 6,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 3, 24, 1, 30, 16, 363, DateTimeKind.Unspecified).AddTicks(3718),
                            CreatedBy = 9,
                            Description = "aliquam",
                            Duration = 53,
                            IsDeleted = false,
                            LocationId = 1,
                            Name = "nesciunt",
                            StartTime = new DateTime(2022, 12, 25, 21, 23, 41, 667, DateTimeKind.Local).AddTicks(1795),
                            TeamId = 8,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 12, 28, 2, 21, 17, 884, DateTimeKind.Unspecified).AddTicks(1792),
                            CreatedBy = 1,
                            Description = "Earum sit natus sit deleniti.\nAccusamus culpa cons",
                            Duration = 39,
                            IsDeleted = false,
                            LocationId = 2,
                            Name = "qui",
                            StartTime = new DateTime(2022, 10, 1, 21, 42, 58, 138, DateTimeKind.Local).AddTicks(8631),
                            TeamId = 8,
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailabilitySlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilitySlotId = 2,
                            CreatedAt = new DateTime(2019, 12, 1, 19, 15, 1, 760, DateTimeKind.Unspecified).AddTicks(3290),
                            IsDeleted = false,
                            Text = "Facere quibusdam quam animi explicabo voluptatem porro quo harum quasi. Tempora consequatur ex adipisci animi. Pariatur ut voluptatibus deleniti ratione ut velit animi.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            AvailabilitySlotId = 1,
                            CreatedAt = new DateTime(2021, 1, 19, 4, 56, 38, 48, DateTimeKind.Unspecified).AddTicks(3172),
                            IsDeleted = false,
                            Text = "Illo ut commodi sunt odit a minus magni asperiores saepe.\nSint quo vel.\nEveniet natus et ab nihil.\nImpedit quo expedita dolorem ullam officia impedit.\nMaiores reiciendis ut non fugit.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            AvailabilitySlotId = 5,
                            CreatedAt = new DateTime(2021, 4, 12, 22, 23, 15, 699, DateTimeKind.Unspecified).AddTicks(2476),
                            IsDeleted = false,
                            Text = "Modi iste autem tempore quod similique enim beatae ullam. Voluptatem voluptatem similique incidunt animi qui saepe quis quisquam qui. Et quibusdam quam alias omnis debitis et facere veritatis. Aut eaque sed.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            AvailabilitySlotId = 7,
                            CreatedAt = new DateTime(2019, 11, 9, 0, 41, 30, 571, DateTimeKind.Unspecified).AddTicks(8882),
                            IsDeleted = false,
                            Text = "mollitiaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            AvailabilitySlotId = 8,
                            CreatedAt = new DateTime(2020, 4, 14, 22, 28, 53, 761, DateTimeKind.Unspecified).AddTicks(1121),
                            IsDeleted = false,
                            Text = "mollitiaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            AvailabilitySlotId = 2,
                            CreatedAt = new DateTime(2020, 10, 24, 2, 9, 18, 694, DateTimeKind.Unspecified).AddTicks(3264),
                            IsDeleted = false,
                            Text = "At deleniti veniam et cupiditate quis blanditiis veniam.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            AvailabilitySlotId = 9,
                            CreatedAt = new DateTime(2020, 12, 24, 3, 10, 3, 106, DateTimeKind.Unspecified).AddTicks(1802),
                            IsDeleted = false,
                            Text = "praesentiumAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            AvailabilitySlotId = 1,
                            CreatedAt = new DateTime(2019, 9, 3, 1, 56, 8, 978, DateTimeKind.Unspecified).AddTicks(6797),
                            IsDeleted = false,
                            Text = "Et quis ut et eaque non at velit.AAAAAAAAAAAAAAAAA",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            AvailabilitySlotId = 1,
                            CreatedAt = new DateTime(2020, 3, 27, 4, 32, 41, 957, DateTimeKind.Unspecified).AddTicks(425),
                            IsDeleted = false,
                            Text = "Temporibus sit placeat.\nTenetur neque aut.\nMaxime soluta rem laborum occaecati est magni magni sed.\nVoluptas et dolor vel excepturi fuga.\nModi et voluptatibus laboriosam rerum.\nQui error magni neque deserunt.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            AvailabilitySlotId = 3,
                            CreatedAt = new DateTime(2020, 9, 7, 21, 35, 9, 694, DateTimeKind.Unspecified).AddTicks(4231),
                            IsDeleted = false,
                            Text = "Sit voluptatibus quasi soluta.\nQuis et quae blanditiis et.\nNulla est voluptate ratione corrupti sed accusantium.",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 12, 10, 0, 41, 16, 96, DateTimeKind.Unspecified).AddTicks(227),
                            Description = "sint",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Goyette, Conn and Morissette",
                            PageLink = "https://rasheed.org",
                            TimeZone = "Pacific/F",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 4, 25, 12, 58, 54, 935, DateTimeKind.Unspecified).AddTicks(5911),
                            Description = "ipsam",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gleichner - Murazik",
                            PageLink = "https://tierra.net",
                            TimeZone = "America/S",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 2, 26, 17, 33, 25, 653, DateTimeKind.Unspecified).AddTicks(9785),
                            Description = "Voluptas consequatur beatae placeat praesentium est et sed ex.\nQuis alias est qui esse ea nihil.\nEaque perspiciatis dolore ut.\nEst iste quo.\nQuia nihil facere aut iste voluptatem est ut nulla non.\nDolor veritatis quo illo et esse pariatur alias ipsum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Predovic Group",
                            PageLink = "http://una.info",
                            TimeZone = "Europe/He",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 16, 16, 12, 27, 391, DateTimeKind.Unspecified).AddTicks(9825),
                            Description = "Dolorem consequatur asperiores eligendi explicabo voluptas alias odio et id.\nMinima mollitia ut quasi aut ea culpa.\nLibero quibusdam similique maiores beatae qui.\nDolores sed quia voluptatum sapiente.\nConsectetur ab corporis illo explicabo alias.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Orn, Kuphal and Paucek",
                            PageLink = "https://elouise.org",
                            TimeZone = "Europe/Co",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 4, 22, 7, 50, 5, 468, DateTimeKind.Unspecified).AddTicks(889),
                            Description = "Voluptatem quaerat doloribus ad quo.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Predovic - Jacobson",
                            PageLink = "https://unique.org",
                            TimeZone = "Asia/Toky",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2021, 2, 24, 23, 51, 22, 330, DateTimeKind.Unspecified).AddTicks(5861),
                            Description = "Quisquam a voluptatem modi aut dolores et et fugit et. Qui maiores totam incidunt illo. Qui dolores quae accusantium amet non beatae harum est.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gulgowski Inc",
                            PageLink = "http://reyna.biz",
                            TimeZone = "Europe/Br",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2019, 8, 8, 0, 36, 54, 303, DateTimeKind.Unspecified).AddTicks(6587),
                            Description = "quisquam",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Daugherty - Schumm",
                            PageLink = "https://devante.name",
                            TimeZone = "Asia/Kolk",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 6, 10, 17, 22, 50, 244, DateTimeKind.Unspecified).AddTicks(4235),
                            Description = "Odio et illum explicabo accusantium.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Spinka LLC",
                            PageLink = "https://kathleen.biz",
                            TimeZone = "America/I",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 5, 2, 16, 29, 0, 178, DateTimeKind.Unspecified).AddTicks(2019),
                            Description = "Voluptates impedit molestiae. Ut explicabo amet. Qui ratione quasi error consequatur.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Marvin - Kulas",
                            PageLink = "http://kaylee.name",
                            TimeZone = "Pacific/A",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2019, 8, 1, 2, 2, 19, 77, DateTimeKind.Unspecified).AddTicks(8910),
                            Description = "Aut quis sed et facilis iste.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Strosin - Weimann",
                            PageLink = "https://mia.net",
                            TimeZone = "Pacific/P",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TeamId = 1,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            UserId = 2,
                            TeamId = 2,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            UserId = 3,
                            TeamId = 3,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            UserId = 4,
                            TeamId = 4,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 5,
                            TeamId = 5,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            UserId = 6,
                            TeamId = 6,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 7,
                            TeamId = 7,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2
                        },
                        new
                        {
                            UserId = 8,
                            TeamId = 8,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 9,
                            TeamId = 9,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 10,
                            TeamId = 10,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            EventId = 1,
                            Priority = 10
                        },
                        new
                        {
                            MemberId = 2,
                            EventId = 2,
                            Priority = 5
                        },
                        new
                        {
                            MemberId = 3,
                            EventId = 3,
                            Priority = 8
                        },
                        new
                        {
                            MemberId = 4,
                            EventId = 4,
                            Priority = 7
                        },
                        new
                        {
                            MemberId = 5,
                            EventId = 5,
                            Priority = 9
                        },
                        new
                        {
                            MemberId = 6,
                            EventId = 6,
                            Priority = 4
                        },
                        new
                        {
                            MemberId = 7,
                            EventId = 7,
                            Priority = 5
                        },
                        new
                        {
                            MemberId = 8,
                            EventId = 8,
                            Priority = 8
                        },
                        new
                        {
                            MemberId = 9,
                            EventId = 9,
                            Priority = 5
                        },
                        new
                        {
                            MemberId = 10,
                            EventId = 10,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 23, 5, 44, 52, 949, DateTimeKind.Unspecified).AddTicks(4934),
                            Email = "Roland18@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/519.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Roland Cronin",
                            PhoneNumber = "935-530-15",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 1, 22, 22, 58, 16, 103, DateTimeKind.Unspecified).AddTicks(8827),
                            Email = "Lloyd95@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/478.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Lloyd Bosco",
                            PhoneNumber = "(900) 987-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2019, 10, 14, 21, 31, 30, 196, DateTimeKind.Unspecified).AddTicks(7952),
                            Email = "Lamar25@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/289.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Lamar Greenfelder",
                            PhoneNumber = "821.852.81",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 9, 28, 10, 16, 48, 231, DateTimeKind.Unspecified).AddTicks(1501),
                            Email = "Jermaine.Runte71@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1001.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Jermaine Runte",
                            PhoneNumber = "(656) 612-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 12, 13, 23, 25, 10, 811, DateTimeKind.Unspecified).AddTicks(2115),
                            Email = "Cory_Schamberger@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/343.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Cory Schamberger",
                            PhoneNumber = "212-739-35",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 12, 15, 10, 50, 20, 724, DateTimeKind.Unspecified).AddTicks(7026),
                            Email = "Sonya.Goodwin@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/572.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Sonya Goodwin",
                            PhoneNumber = "930-573-65",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2019, 11, 13, 8, 31, 30, 516, DateTimeKind.Unspecified).AddTicks(7436),
                            Email = "Alex_Waelchi@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/973.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Alex Waelchi",
                            PhoneNumber = "1-231-579-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 3, 15, 17, 34, 6, 145, DateTimeKind.Unspecified).AddTicks(8434),
                            Email = "Dave69@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/534.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Dave Towne",
                            PhoneNumber = "1-977-328-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 7, 18, 16, 58, 0, 712, DateTimeKind.Unspecified).AddTicks(2890),
                            Email = "Albert.Lueilwitz@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1067.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Albert Lueilwitz",
                            PhoneNumber = "(654) 365-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2019, 8, 7, 10, 50, 55, 858, DateTimeKind.Unspecified).AddTicks(3832),
                            Email = "Mandy23@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/959.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Mandy Connelly",
                            PhoneNumber = "(979) 393-",
                            UpdatedAt = new DateTime(2022, 8, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilitySlotId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AvailabilitySlotId");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AvailabilitySlotId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AvailabilitySlotId = 2
                        },
                        new
                        {
                            UserId = 3,
                            AvailabilitySlotId = 3
                        },
                        new
                        {
                            UserId = 4,
                            AvailabilitySlotId = 4
                        },
                        new
                        {
                            UserId = 5,
                            AvailabilitySlotId = 5
                        },
                        new
                        {
                            UserId = 6,
                            AvailabilitySlotId = 6
                        },
                        new
                        {
                            UserId = 7,
                            AvailabilitySlotId = 7
                        },
                        new
                        {
                            UserId = 8,
                            AvailabilitySlotId = 8
                        },
                        new
                        {
                            UserId = 9,
                            AvailabilitySlotId = 9
                        },
                        new
                        {
                            UserId = 10,
                            AvailabilitySlotId = 10
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
