// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220810190347_AddPropertiesToUserEntity")]
    partial class AddPropertiesToUserEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<int>("BookingScheduleBlockingTimeMeetingInHours")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("PaddingBeforeMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 3,
                            AvailabilitySlotId = 1L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 4,
                            Days = 6,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            AvailabilitySlotId = 2L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 2,
                            Days = 25,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 3,
                            AvailabilitySlotId = 3L,
                            BookingScheduleBlockingTimeMeetingInHours = 3,
                            Color = 2,
                            Days = 17,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            PaddingBeforeMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 3,
                            AvailabilitySlotId = 4L,
                            BookingScheduleBlockingTimeMeetingInHours = 2,
                            Color = 7,
                            Days = 17,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            PaddingBeforeMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 3,
                            AvailabilitySlotId = 5L,
                            BookingScheduleBlockingTimeMeetingInHours = 2,
                            Color = 7,
                            Days = 2,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 2,
                            AvailabilitySlotId = 6L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 8,
                            Days = 13,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 1,
                            AvailabilitySlotId = 7L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 5,
                            Days = 18,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            PaddingBeforeMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 3,
                            AvailabilitySlotId = 8L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 3,
                            Days = 24,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 3,
                            AvailabilitySlotId = 9L,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 8,
                            Days = 8,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            PaddingBeforeMeeting = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 2,
                            AvailabilitySlotId = 10L,
                            BookingScheduleBlockingTimeMeetingInHours = 3,
                            Color = 6,
                            Days = 20,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdvancedSlotSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvancedSlotSettingsId = 1L,
                            CreatedAt = new DateTime(2020, 7, 17, 15, 7, 20, 383, DateTimeKind.Unspecified).AddTicks(4926),
                            CreatedBy = 1L,
                            Description = "Optio quo quisquam ipsa. Eum pariatur omnis libero et hic beatae. Porro vitae corporis temporibus quia quo dolorem earum earum iusto.",
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://shemar.biz",
                            LocationId = 1L,
                            Name = "velit",
                            Size = 57,
                            TeamId = 4L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            AdvancedSlotSettingsId = 2L,
                            CreatedAt = new DateTime(2021, 6, 26, 21, 22, 14, 918, DateTimeKind.Unspecified).AddTicks(2972),
                            CreatedBy = 2L,
                            Description = "Dolorem soluta est dolores id et mollitia ipsum ipsum consectetur. Ipsum cumque qui similique quia voluptas modi sit. Hic distinctio ut ex ad asperiores eos.",
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://edward.net",
                            LocationId = 2L,
                            Name = "corrupti",
                            Size = 57,
                            TeamId = 1L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            AdvancedSlotSettingsId = 3L,
                            CreatedAt = new DateTime(2020, 6, 5, 14, 43, 9, 786, DateTimeKind.Unspecified).AddTicks(3806),
                            CreatedBy = 3L,
                            Description = "Qui quia qui magni autem. Aut dolor facilis autem quidem optio repellat. Aspernatur excepturi ipsum ullam et officiis repellat. Exercitationem et architecto consequatur voluptas. Iusto velit tenetur et id est.",
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://nasir.biz",
                            LocationId = 4L,
                            Name = "blanditiis",
                            Size = 43,
                            TeamId = 2L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            AdvancedSlotSettingsId = 4L,
                            CreatedAt = new DateTime(2019, 8, 24, 17, 53, 14, 743, DateTimeKind.Unspecified).AddTicks(1741),
                            CreatedBy = 4L,
                            Description = "Aut minima quam inventore voluptatem sunt. Et qui est voluptas. Quod ea nihil dolor voluptatem autem.",
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://braeden.name",
                            LocationId = 4L,
                            Name = "omnis",
                            Size = 28,
                            TeamId = 8L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            AdvancedSlotSettingsId = 5L,
                            CreatedAt = new DateTime(2019, 12, 3, 0, 57, 50, 783, DateTimeKind.Unspecified).AddTicks(6476),
                            CreatedBy = 5L,
                            Description = "Earum porro illo est assumenda excepturi expedita at.",
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://marcel.com",
                            LocationId = 1L,
                            Name = "at",
                            Size = 54,
                            TeamId = 7L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            AdvancedSlotSettingsId = 6L,
                            CreatedAt = new DateTime(2019, 11, 21, 6, 12, 0, 359, DateTimeKind.Unspecified).AddTicks(9649),
                            CreatedBy = 6L,
                            Description = "harum",
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://oral.biz",
                            LocationId = 1L,
                            Name = "et",
                            Size = 49,
                            TeamId = 10L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            AdvancedSlotSettingsId = 7L,
                            CreatedAt = new DateTime(2019, 11, 22, 15, 4, 52, 807, DateTimeKind.Unspecified).AddTicks(6435),
                            CreatedBy = 7L,
                            Description = "At at est esse voluptatem rerum. Ducimus cupiditate repudiandae officia. Quo eum doloribus voluptates mollitia commodi. Et itaque cupiditate. Maiores reiciendis nobis.",
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://oscar.net",
                            LocationId = 3L,
                            Name = "voluptas",
                            Size = 60,
                            TeamId = 4L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            AdvancedSlotSettingsId = 8L,
                            CreatedAt = new DateTime(2020, 4, 21, 8, 3, 21, 899, DateTimeKind.Unspecified).AddTicks(8971),
                            CreatedBy = 8L,
                            Description = "Delectus est placeat molestias vitae.",
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://rodolfo.com",
                            LocationId = 2L,
                            Name = "id",
                            Size = 48,
                            TeamId = 8L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            AdvancedSlotSettingsId = 9L,
                            CreatedAt = new DateTime(2020, 8, 29, 0, 18, 8, 502, DateTimeKind.Unspecified).AddTicks(9767),
                            CreatedBy = 9L,
                            Description = "Veniam accusantium et rerum sed fuga autem quo.\nId nemo corporis ut aut.\nAdipisci qui voluptas voluptatibus.",
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://elinore.org",
                            LocationId = 1L,
                            Name = "ut",
                            Size = 32,
                            TeamId = 5L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            AdvancedSlotSettingsId = 10L,
                            CreatedAt = new DateTime(2019, 9, 12, 22, 50, 17, 525, DateTimeKind.Unspecified).AddTicks(8032),
                            CreatedBy = 10L,
                            Description = "Asperiores minima sed sunt qui voluptatem temporibus accusantium reprehenderit.\nQui reprehenderit et omnis nemo.\nVel quis quibusdam autem ipsum totam.\nUt alias quis sunt sequi et.\nVoluptatem placeat nesciunt repellendus quod numquam ab officia magnam placeat.\nVoluptas et et repellat aut architecto a",
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://damion.name",
                            LocationId = 4L,
                            Name = "labore",
                            Size = 23,
                            TeamId = 2L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 23, 19, 8, 56, 510, DateTimeKind.Unspecified).AddTicks(2425),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 8, 2, 15, 25, 16, 586, DateTimeKind.Unspecified).AddTicks(5740),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 11, 12, 7, 56, 45, 618, DateTimeKind.Unspecified).AddTicks(4482),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 6, 28, 16, 24, 54, 600, DateTimeKind.Unspecified).AddTicks(9464),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 6, 7, 4, 15, 11, 367, DateTimeKind.Unspecified).AddTicks(8558),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 4, 11, 11, 32, 57, 679, DateTimeKind.Unspecified).AddTicks(3327),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 8, 16, 6, 33, 6, 762, DateTimeKind.Unspecified).AddTicks(9503),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 5, 7, 10, 35, 26, 605, DateTimeKind.Unspecified).AddTicks(1137),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 3, 27, 22, 50, 54, 264, DateTimeKind.Unspecified).AddTicks(4090),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 12, 11, 16, 12, 20, 892, DateTimeKind.Unspecified).AddTicks(1440),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            Email = "Irvin.Hermiston@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 31, 1, 34, 4, 852, DateTimeKind.Unspecified).AddTicks(1478), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Irvin Hermiston"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 3L,
                            Email = "Johnnie_Lubowitz@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 30, 11, 10, 5, 489, DateTimeKind.Unspecified).AddTicks(833), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Johnnie Lubowitz"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 2L,
                            Email = "Flora.Schroeder@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 14, 6, 43, 36, 965, DateTimeKind.Unspecified).AddTicks(6223), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Flora Schroeder"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 6L,
                            Email = "Terrence.Barrows@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 25, 5, 7, 30, 603, DateTimeKind.Unspecified).AddTicks(1320), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Terrence Barrows"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            Email = "Jeannette19@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 3, 11, 43, 53, 864, DateTimeKind.Unspecified).AddTicks(8444), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jeannette Durgan"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 2L,
                            Email = "Katie10@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 17, 18, 4, 20, 865, DateTimeKind.Unspecified).AddTicks(429), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Katie Frami"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 2L,
                            Email = "Candice.Romaguera@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 2, 8, 48, 30, 893, DateTimeKind.Unspecified).AddTicks(1977), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Candice Romaguera"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 5L,
                            Email = "Shelly_Kilback@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 6, 1, 28, 18, 589, DateTimeKind.Unspecified).AddTicks(4450), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Shelly Kilback"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 1L,
                            Email = "Joanne.Corwin21@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 30, 16, 15, 14, 53, DateTimeKind.Unspecified).AddTicks(6405), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Joanne Corwin"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 2L,
                            Email = "Marie69@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 2, 19, 12, 11, 715, DateTimeKind.Unspecified).AddTicks(6912), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marie Lockman"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5132), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5050), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5453), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5392), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5472), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5467), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5486), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5482), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5499), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5495), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5511), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5507), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5523), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5519), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5535), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5531), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5547), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5543), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5559), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 11, 22, 3, 46, 165, DateTimeKind.Unspecified).AddTicks(5555), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Zoom"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "GoogleMeet"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Skype"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Name = "Slack"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2020, 12, 26, 1, 32, 58, 534, DateTimeKind.Unspecified).AddTicks(1704),
                            CreatedBy = 2L,
                            Description = "Qui quia rem illo optio consectetur. Quia illum no",
                            Duration = 37,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "quod",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 10, 3, 58, 23, 165, DateTimeKind.Unspecified).AddTicks(7742), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2021, 1, 9, 15, 57, 59, 360, DateTimeKind.Unspecified).AddTicks(6762),
                            CreatedBy = 9L,
                            Description = "Officiis sunt consequatur odio nihil.",
                            Duration = 19,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "architecto",
                            StartTime = new DateTimeOffset(new DateTime(2023, 5, 5, 18, 45, 0, 436, DateTimeKind.Unspecified).AddTicks(209), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2021, 1, 13, 22, 38, 29, 153, DateTimeKind.Unspecified).AddTicks(4224),
                            CreatedBy = 10L,
                            Description = "itaque",
                            Duration = 37,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "dolorum",
                            StartTime = new DateTimeOffset(new DateTime(2022, 8, 22, 12, 7, 35, 692, DateTimeKind.Unspecified).AddTicks(2376), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2021, 2, 11, 7, 50, 24, 352, DateTimeKind.Unspecified).AddTicks(5018),
                            CreatedBy = 3L,
                            Description = "Similique omnis doloribus aperiam rerum iusto enim",
                            Duration = 31,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "dignissimos",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 27, 14, 51, 5, 291, DateTimeKind.Unspecified).AddTicks(6441), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2020, 5, 4, 23, 22, 43, 206, DateTimeKind.Unspecified).AddTicks(4144),
                            CreatedBy = 5L,
                            Description = "hic",
                            Duration = 47,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "ut",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 24, 14, 20, 40, 642, DateTimeKind.Unspecified).AddTicks(4330), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 8, 9, 16, 52, 7, 801, DateTimeKind.Unspecified).AddTicks(9019),
                            CreatedBy = 6L,
                            Description = "Debitis id exercitationem et est enim ratione modi",
                            Duration = 31,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "nesciunt",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 10, 16, 20, 53, 411, DateTimeKind.Unspecified).AddTicks(4869), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 4, 12, 7, 4, 46, 852, DateTimeKind.Unspecified).AddTicks(37),
                            CreatedBy = 3L,
                            Description = "Assumenda ipsam minima sunt numquam omnis maiores",
                            Duration = 43,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "pariatur",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 17, 0, 17, 55, 963, DateTimeKind.Unspecified).AddTicks(5489), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 6, 3, 21, 42, 58, 464, DateTimeKind.Unspecified).AddTicks(1287),
                            CreatedBy = 7L,
                            Description = "Est molestias qui quam dicta quos et.",
                            Duration = 28,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "voluptatem",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 22, 13, 16, 14, 342, DateTimeKind.Unspecified).AddTicks(8334), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2021, 6, 22, 23, 58, 36, 779, DateTimeKind.Unspecified).AddTicks(9363),
                            CreatedBy = 2L,
                            Description = "officia",
                            Duration = 33,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "perspiciatis",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 11, 13, 28, 23, 124, DateTimeKind.Unspecified).AddTicks(6867), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2021, 1, 16, 6, 12, 3, 589, DateTimeKind.Unspecified).AddTicks(403),
                            CreatedBy = 4L,
                            Description = "Laborum provident quo. Qui blanditiis voluptatum i",
                            Duration = 56,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "doloribus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 31, 0, 33, 55, 325, DateTimeKind.Unspecified).AddTicks(8598), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "mollitiaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "maioresAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Id dolore sit possimus nostrum et magni.\nAut et cumque.\nDistinctio quasi sit minus.\nError id voluptatum et dolorem nulla tempora enim.\nQuas tenetur in."
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "sintAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "repudiandaeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Voluptates odio explicabo nisi.AAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "Omnis laborum officia consequatur facere ullam illum consequuntur eaque iusto. Corporis ullam accusamus magni corporis omnis tenetur pariatur laborum. Accusamus doloremque minima. Unde velit quisquam nisi amet architecto."
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "Est non laudantium.\nAb soluta neque qui excepturi qui numquam ipsum inventore accusamus."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "Dignissimos veniam aut voluptatum sed placeat ex. Vel veniam possimus non nihil praesentium sapiente expedita odit. Quasi reiciendis dolor aut rerum quo similique blanditiis. Velit porro iusto ipsa sit corrupti vel id qui velit. Nesciunt autem totam enim repudiandae. Enim iste odio doloremque non ip"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Eaque eaque mollitia ab. Temporibus quibusdam est. Temporibus officiis id."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "At eum aperiam est quia.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Robel Inc",
                            PageLink = "http://savion.com",
                            TimeZone = "Europe/Be"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Eos voluptatem nulla optio accusamus quia optio consequatur. Officia et et recusandae blanditiis eos. Cumque veritatis voluptates voluptas sed voluptatum eum quae. Deleniti molestiae fuga est placeat quibusdam eos debitis. Dolor quas nemo commodi laboriosam et aut non deserunt asperiores.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Kassulke - Jacobi",
                            PageLink = "https://jerrod.info",
                            TimeZone = "Europe/So"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "rem",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Okuneva, Hyatt and Sporer",
                            PageLink = "https://madelyn.biz",
                            TimeZone = "Asia/Kolk"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Expedita similique qui voluptate tempora enim placeat.\nAccusantium quia sed velit placeat voluptates.\nRatione sint ex.\nEst laudantium optio laboriosam neque non non.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Friesen, Schamberger and Schamberger",
                            PageLink = "http://arvid.com",
                            TimeZone = "Europe/Vi"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Ducimus quaerat quia ea tempora et nemo qui aspernatur doloremque. Id omnis officia natus ullam vel qui maxime. Debitis eveniet animi et aut explicabo id quisquam ea occaecati.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Farrell, Schulist and Stamm",
                            PageLink = "https://alessia.biz",
                            TimeZone = "America/M"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Nulla natus maiores laborum. Sit veniam vel dicta deserunt maxime. Atque consectetur delectus quia quos. Et impedit inventore ea et autem dolorum aut incidunt. Maxime a autem dignissimos et dolorem qui assumenda aut.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Luettgen - Upton",
                            PageLink = "https://lillie.name",
                            TimeZone = "Australia"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Vero iure quis officia aut.\nTotam qui rerum.\nOfficiis nisi optio et voluptas nemo laborum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Rippin, Schuster and Weimann",
                            PageLink = "https://joshuah.net",
                            TimeZone = "Pacific/F"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Error voluptatem ipsa et occaecati est eius.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Glover - Gislason",
                            PageLink = "https://hipolito.net",
                            TimeZone = "Asia/Kabu"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Ut enim asperiores voluptatem vitae rem temporibus tenetur aut. Iusto beatae ipsam maiores facere. Officiis eos animi quo excepturi. Qui aut architecto. Repellendus corrupti aut eum nulla vitae placeat excepturi quo odit. Natus doloremque tempore.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Fritsch and Sons",
                            PageLink = "https://hudson.biz",
                            TimeZone = "America/S"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "explicabo",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Konopelski - Wunsch",
                            PageLink = "http://isaias.org",
                            TimeZone = "Europe/Ki"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 10
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 9
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 10
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TimeFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateFormat = "24h",
                            Email = "Andrew_Tremblay@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/894.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Andrew Tremblay",
                            PhoneNumber = "272-948-89",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 2L,
                            DateFormat = "24h",
                            Email = "Dianne_Leuschke83@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1161.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Dianne Leuschke",
                            PhoneNumber = "1-390-834-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 3L,
                            DateFormat = "24h",
                            Email = "Toby.Johnson@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/30.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Toby Johnson",
                            PhoneNumber = "738.868.88",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 4L,
                            DateFormat = "24h",
                            Email = "Geoffrey_Gibson@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/72.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Geoffrey Gibson",
                            PhoneNumber = "1-452-837-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 5L,
                            DateFormat = "24h",
                            Email = "Eduardo_Cormier@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1183.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Eduardo Cormier",
                            PhoneNumber = "1-244-350-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 6L,
                            DateFormat = "24h",
                            Email = "Ellen_Braun54@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/296.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Ellen Braun",
                            PhoneNumber = "(759) 739-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 7L,
                            DateFormat = "24h",
                            Email = "Johnnie.Fadel@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/675.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Johnnie Fadel",
                            PhoneNumber = "1-828-634-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 8L,
                            DateFormat = "24h",
                            Email = "Kevin_Krajcik15@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/30.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Kevin Krajcik",
                            PhoneNumber = "(337) 608-",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 9L,
                            DateFormat = "24h",
                            Email = "Jimmy_Stracke24@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/465.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Jimmy Stracke",
                            PhoneNumber = "365-468-11",
                            TimeFormat = "DD/MM/YYYY"
                        },
                        new
                        {
                            Id = 10L,
                            DateFormat = "24h",
                            Email = "Reginald.Koch14@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/358.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = "ENG",
                            Name = "Reginald Koch",
                            PhoneNumber = "(551) 512-",
                            TimeFormat = "DD/MM/YYYY"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
