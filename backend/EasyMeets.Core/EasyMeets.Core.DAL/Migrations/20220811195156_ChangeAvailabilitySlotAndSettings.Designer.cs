// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220811195156_ChangeAvailabilitySlotAndSettings")]
    partial class ChangeAvailabilitySlotAndSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 2,
                            Color = 7,
                            Days = 9,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 1,
                            Color = 5,
                            Days = 30,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 3,
                            Color = 5,
                            Days = 24,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 3,
                            Color = 5,
                            Days = 14,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            Color = 6,
                            Days = 26,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 2,
                            Color = 1,
                            Days = 12,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 3,
                            Color = 7,
                            Days = 2,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 3,
                            Color = 8,
                            Days = 9,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 3,
                            Color = 4,
                            Days = 27,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 1,
                            Color = 7,
                            Days = 12,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdvancedSlotSettingsId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedSlotSettingsId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvancedSlotSettingsId = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 11, 20, 7, 43, 1, 890, DateTimeKind.Unspecified).AddTicks(2149),
                            CreatedBy = 1L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://lennie.com",
                            LocationId = 5L,
                            Name = "ducimus",
                            Size = 60,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "aut"
                        },
                        new
                        {
                            Id = 2L,
                            AdvancedSlotSettingsId = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2019, 10, 6, 8, 40, 57, 431, DateTimeKind.Unspecified).AddTicks(2932),
                            CreatedBy = 2L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://major.com",
                            LocationId = 2L,
                            Name = "voluptas",
                            Size = 44,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quasi saepe necessitatibus. Veniam necessitatibus aut. Delectus asperiores impedit molestias in ea. Explicabo sint quo. Nulla rerum amet occaecati ut maiores. Quis est ut iusto voluptatibus sit delectus natus dolorem odit."
                        },
                        new
                        {
                            Id = 3L,
                            AdvancedSlotSettingsId = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2021, 3, 19, 13, 33, 15, 117, DateTimeKind.Unspecified).AddTicks(5135),
                            CreatedBy = 3L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://keanu.org",
                            LocationId = 3L,
                            Name = "sit",
                            Size = 40,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Delectus aspernatur sed doloribus ipsam ut."
                        },
                        new
                        {
                            Id = 4L,
                            AdvancedSlotSettingsId = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 2, 3, 3, 36, 48, 695, DateTimeKind.Unspecified).AddTicks(3687),
                            CreatedBy = 4L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://emma.net",
                            LocationId = 1L,
                            Name = "alias",
                            Size = 28,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quia id dolores et magni. Non esse magni velit cupiditate consectetur quis ipsa. Eos similique voluptate excepturi cumque natus in consectetur dolore est. Harum qui quidem nesciunt. Non voluptatem neque. Sit aut quasi id aut sunt quasi."
                        },
                        new
                        {
                            Id = 5L,
                            AdvancedSlotSettingsId = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2019, 9, 6, 1, 0, 5, 16, DateTimeKind.Unspecified).AddTicks(4870),
                            CreatedBy = 5L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://caterina.net",
                            LocationId = 3L,
                            Name = "cupiditate",
                            Size = 28,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Ut enim laborum reiciendis at quasi aliquam ex dolorem. Quos qui assumenda et est odit. Consequatur magnam sunt dolores vel qui. Ut enim animi cum officia commodi sint. Voluptas nostrum cumque aut et tempore tempore natus facere."
                        },
                        new
                        {
                            Id = 6L,
                            AdvancedSlotSettingsId = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 5, 23, 13, 1, 41, 613, DateTimeKind.Unspecified).AddTicks(9550),
                            CreatedBy = 6L,
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://adell.net",
                            LocationId = 5L,
                            Name = "laboriosam",
                            Size = 48,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "deserunt"
                        },
                        new
                        {
                            Id = 7L,
                            AdvancedSlotSettingsId = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2019, 9, 15, 2, 32, 29, 119, DateTimeKind.Unspecified).AddTicks(6227),
                            CreatedBy = 7L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://adalberto.biz",
                            LocationId = 5L,
                            Name = "voluptas",
                            Size = 37,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Cum numquam quos et voluptatem sequi a amet distinctio esse."
                        },
                        new
                        {
                            Id = 8L,
                            AdvancedSlotSettingsId = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 11, 12, 3, 6, 48, 665, DateTimeKind.Unspecified).AddTicks(9787),
                            CreatedBy = 8L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://hillary.net",
                            LocationId = 3L,
                            Name = "consectetur",
                            Size = 56,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Tempore qui harum quia labore dolorum.\nDebitis et natus facere error quos ducimus fugiat eveniet.\nUllam ut est ipsam aut doloremque qui.\nEt ratione necessitatibus quo sit est fuga quia quis excepturi.\nNecessitatibus in eum molestias sit minima.\nQuibusdam autem voluptatem vel et at et est qui."
                        },
                        new
                        {
                            Id = 9L,
                            AdvancedSlotSettingsId = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 5, 3, 18, 21, 0, 358, DateTimeKind.Unspecified).AddTicks(1416),
                            CreatedBy = 9L,
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://elias.name",
                            LocationId = 1L,
                            Name = "id",
                            Size = 51,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Dolor beatae a quod pariatur."
                        },
                        new
                        {
                            Id = 10L,
                            AdvancedSlotSettingsId = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 3, 16, 8, 16, 49, 858, DateTimeKind.Unspecified).AddTicks(9796),
                            CreatedBy = 10L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://joanne.com",
                            LocationId = 5L,
                            Name = "neque",
                            Size = 15,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "at"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 29, 3, 6, 45, 489, DateTimeKind.Unspecified).AddTicks(26),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 2, 19, 18, 45, 882, DateTimeKind.Unspecified).AddTicks(9516),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 20, 2, 22, 37, 953, DateTimeKind.Unspecified).AddTicks(8676),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 28, 14, 22, 55, 220, DateTimeKind.Unspecified).AddTicks(2912),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 25, 9, 30, 1, 370, DateTimeKind.Unspecified).AddTicks(3928),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 13, 19, 8, 7, 755, DateTimeKind.Unspecified).AddTicks(3944),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 7L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 6, 19, 12, 8, 24, 269, DateTimeKind.Unspecified).AddTicks(4552),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 8, 10, 10, 11, 27, 730, DateTimeKind.Unspecified).AddTicks(4297),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 7, 25, 20, 31, 44, 428, DateTimeKind.Unspecified).AddTicks(5318),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 10, 5, 5, 18, 11, 465, DateTimeKind.Unspecified).AddTicks(3922),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 2L,
                            Email = "Carroll_Pouros5@yahoo.comAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 15, 2, 20, 14, 753, DateTimeKind.Unspecified).AddTicks(3868), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Carroll Pouros"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 6L,
                            Email = "Connie44@yahoo.comAAAAAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 2, 3, 0, 14, 246, DateTimeKind.Unspecified).AddTicks(2219), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Connie Stoltenberg"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 8L,
                            Email = "Janis_Legros23@hotmail.comAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 6, 19, 55, 44, 688, DateTimeKind.Unspecified).AddTicks(593), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Janis Legros"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 9L,
                            Email = "Russell.Kunze@hotmail.comAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 16, 18, 30, 11, 665, DateTimeKind.Unspecified).AddTicks(1088), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Russell Kunze"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 7L,
                            Email = "Tabitha_Reynolds44@yahoo.comAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 23, 19, 46, 55, 164, DateTimeKind.Unspecified).AddTicks(209), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Tabitha Reynolds"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 1L,
                            Email = "Edwin87@yahoo.comAAAAAAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 12, 13, 13, 3, 858, DateTimeKind.Unspecified).AddTicks(6556), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Edwin Hyatt"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 3L,
                            Email = "Marjorie80@yahoo.comAAAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 14, 16, 4, 24, 489, DateTimeKind.Unspecified).AddTicks(8956), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marjorie Effertz"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 10L,
                            Email = "Norman_McGlynn76@yahoo.comAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 11, 0, 2, 6, 239, DateTimeKind.Unspecified).AddTicks(9627), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Norman McGlynn"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 1L,
                            Email = "June_Kovacek@yahoo.comAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 17, 5, 19, 12, 82, DateTimeKind.Unspecified).AddTicks(1860), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "June Kovacek"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 3L,
                            Email = "Kim_Ruecker18@hotmail.comAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 18, 16, 6, 19, 682, DateTimeKind.Unspecified).AddTicks(74), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kim Ruecker"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(513), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(379), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(715), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(698), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(740), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(733), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(825), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(755), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(858), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(850), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(880), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(873), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(901), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(894), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(922), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(915), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(943), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(936), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(964), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 22, 51, 55, 235, DateTimeKind.Unspecified).AddTicks(957), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Zoom"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "GoogleMeet"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Skype"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Name = "Slack"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2021, 2, 1, 2, 55, 37, 421, DateTimeKind.Unspecified).AddTicks(2625),
                            CreatedBy = 5L,
                            Description = "quaerat",
                            Duration = 18,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "aliquid",
                            StartTime = new DateTimeOffset(new DateTime(2022, 8, 22, 11, 47, 4, 481, DateTimeKind.Unspecified).AddTicks(1292), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2019, 11, 14, 12, 17, 54, 90, DateTimeKind.Unspecified).AddTicks(9599),
                            CreatedBy = 7L,
                            Description = "Dolore doloribus fuga hic consequatur aut ipsum co",
                            Duration = 38,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "porro",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 21, 10, 25, 58, 446, DateTimeKind.Unspecified).AddTicks(890), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2019, 9, 1, 13, 45, 1, 493, DateTimeKind.Unspecified).AddTicks(3026),
                            CreatedBy = 1L,
                            Description = "dolore",
                            Duration = 16,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "quo",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 20, 11, 49, 33, 373, DateTimeKind.Unspecified).AddTicks(6737), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2021, 3, 20, 16, 5, 28, 406, DateTimeKind.Unspecified).AddTicks(8592),
                            CreatedBy = 3L,
                            Description = "quisquam",
                            Duration = 21,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "aut",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 7, 20, 25, 32, 148, DateTimeKind.Unspecified).AddTicks(7355), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2020, 11, 5, 13, 8, 20, 157, DateTimeKind.Unspecified).AddTicks(1240),
                            CreatedBy = 4L,
                            Description = "Eligendi quasi sed quod facere esse. Aut sit ab be",
                            Duration = 54,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "atque",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 14, 7, 15, 29, 604, DateTimeKind.Unspecified).AddTicks(7101), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 6, 19, 19, 9, 31, 696, DateTimeKind.Unspecified).AddTicks(1750),
                            CreatedBy = 2L,
                            Description = "aut",
                            Duration = 59,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "dolor",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 20, 8, 36, 30, 495, DateTimeKind.Unspecified).AddTicks(8325), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2019, 9, 18, 19, 31, 27, 79, DateTimeKind.Unspecified).AddTicks(5586),
                            CreatedBy = 4L,
                            Description = "nostrum",
                            Duration = 59,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "harum",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 24, 16, 33, 36, 17, DateTimeKind.Unspecified).AddTicks(2699), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 2, 23, 16, 57, 52, 713, DateTimeKind.Unspecified).AddTicks(2568),
                            CreatedBy = 5L,
                            Description = "quas",
                            Duration = 50,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "error",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 1, 9, 13, 15, 416, DateTimeKind.Unspecified).AddTicks(7127), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2020, 6, 9, 19, 29, 7, 941, DateTimeKind.Unspecified).AddTicks(8383),
                            CreatedBy = 5L,
                            Description = "Commodi illo nostrum. Qui recusandae molestiae et",
                            Duration = 14,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "aliquam",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 1, 15, 10, 19, 900, DateTimeKind.Unspecified).AddTicks(1503), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2021, 4, 19, 9, 14, 49, 868, DateTimeKind.Unspecified).AddTicks(4849),
                            CreatedBy = 8L,
                            Description = "aut",
                            Duration = 17,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "doloribus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 6, 3, 14, 32, 748, DateTimeKind.Unspecified).AddTicks(7658), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "laborumAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Natus dicta quo. Provident quos quasi voluptatem nobis voluptatibus qui nesciunt. Quas incidunt sed nihil non sit accusantium qui. Dolor quis qui tempora."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Quisquam sit ducimus.AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "facilisAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Et esse et est asperiores modi perspiciatis accusantium molestiae ea.\nQui accusantium eveniet nostrum quos doloribus ipsum.\nVel corporis nihil."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "temporeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "Harum vero placeat sunt dolorem deserunt facilis similique quidem quia.\nFuga a suscipit asperiores."
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Voluptatem totam nam consequatur. Voluptates iusto non laboriosam aperiam. Voluptas sunt ut et esse impedit. Temporibus soluta laudantium ut odio quia architecto reprehenderit earum. Sint tempore et incidunt et alias nam magnam."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Dolor dolor iure adipisci dolorem quia at accusantium."
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Vel voluptatem unde quas soluta.\nIste sequi in dignissimos nemo a.\nRerum est ea perspiciatis modi unde sed eligendi est et."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Deleniti rerum vero voluptatem libero sed. Aut et qui maxime quaerat facilis molestiae earum qui. Et iure amet voluptatem sit impedit deleniti eligendi numquam eaque. Quo reiciendis ad aperiam eum sunt porro. Sunt reiciendis molestiae nam occaecati fugiat debitis autem qui. Fuga nam sunt.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Kihn - Corwin",
                            PageLink = "https://raegan.net",
                            TimeZone = "America/B"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "At aut ipsam quo repudiandae doloremque tempora. Fugit ut ut. Fugit ipsum fugiat non incidunt tempore accusantium qui tenetur. Architecto mollitia autem explicabo commodi.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Robel LLC",
                            PageLink = "https://clementine.info",
                            TimeZone = "Europe/Ro"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Illo eum delectus aut vitae.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Olson, Mante and Hodkiewicz",
                            PageLink = "https://keeley.com",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Ipsa iure aut nostrum nihil laudantium.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Crooks, Yundt and Herman",
                            PageLink = "http://avis.org",
                            TimeZone = "Europe/Za"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "aut",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Hayes Group",
                            PageLink = "http://maiya.name",
                            TimeZone = "America/S"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Nihil maiores cupiditate sunt. Optio in nam neque inventore pariatur ab minima. Aut distinctio laudantium repellat. Reiciendis dolor est illo ea quaerat quidem quos tempore aspernatur. Facilis consequuntur quibusdam placeat quas.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Stokes and Sons",
                            PageLink = "http://cicero.info",
                            TimeZone = "Asia/Dhak"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Voluptates suscipit aut earum quasi sit rerum tempora.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Heidenreich Inc",
                            PageLink = "http://alaina.name",
                            TimeZone = "Australia"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Quidem quas nemo praesentium rerum aliquam eius omnis id ea.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Monahan - Will",
                            PageLink = "https://oma.name",
                            TimeZone = "Europe/Br"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Necessitatibus aut harum ducimus.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Larson and Sons",
                            PageLink = "https://lyda.org",
                            TimeZone = "Europe/Ki"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Quasi voluptates omnis voluptas voluptatem. Sed dolorem ut voluptatem voluptatem quia maiores eligendi. Iure ut dolorum nesciunt distinctio voluptatem ea adipisci voluptas omnis. Architecto rem alias esse quo autem tenetur distinctio non. Aliquam asperiores delectus consequatur ullam rerum maxime.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "McKenzie Inc",
                            PageLink = "http://katelin.info",
                            TimeZone = "Europe/Vi"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 9
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 1
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "Johnathan.DuBuque@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Johnathan DuBuque",
                            PhoneNumber = "1-713-449-"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "Beulah_Williamson76@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1206.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Beulah Williamson",
                            PhoneNumber = "(889) 423-"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "Merle_Casper@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/999.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Merle Casper",
                            PhoneNumber = "(876) 416-"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "Melinda99@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1004.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Melinda Smitham",
                            PhoneNumber = "534.583.07"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "Charlene22@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/38.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Charlene Stracke",
                            PhoneNumber = "473.544.72"
                        },
                        new
                        {
                            Id = 6L,
                            Email = "Abel.Maggio@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/402.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Abel Maggio",
                            PhoneNumber = "690-430-14"
                        },
                        new
                        {
                            Id = 7L,
                            Email = "Beverly.Hand43@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/325.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Beverly Hand",
                            PhoneNumber = "252.674.57"
                        },
                        new
                        {
                            Id = 8L,
                            Email = "Lucy_OHara80@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/638.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Lucy O'Hara",
                            PhoneNumber = "1-673-374-"
                        },
                        new
                        {
                            Id = 9L,
                            Email = "Heidi27@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/55.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Heidi Rempel",
                            PhoneNumber = "760-963-90"
                        },
                        new
                        {
                            Id = 10L,
                            Email = "Rita70@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/183.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Name = "Rita Kassulke",
                            PhoneNumber = "457-303-71"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AdvancedSlotSettings")
                        .WithOne("AvailabilitySlot")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AdvancedSlotSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvancedSlotSettings");

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Navigation("AvailabilitySlot")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
