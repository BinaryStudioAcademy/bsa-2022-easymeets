// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220817090701_Add int timezone to team")]
    partial class Addinttimezonetoteam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 2,
                            AvailabilitySlotId = 1L,
                            Color = 2,
                            Days = 11,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 1,
                            AvailabilitySlotId = 2L,
                            Color = 5,
                            Days = 27,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 2,
                            AvailabilitySlotId = 3L,
                            Color = 1,
                            Days = 2,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 1,
                            AvailabilitySlotId = 4L,
                            Color = 2,
                            Days = 20,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 7,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            AvailabilitySlotId = 5L,
                            Color = 6,
                            Days = 13,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 1,
                            AvailabilitySlotId = 6L,
                            Color = 1,
                            Days = 18,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 2,
                            AvailabilitySlotId = 7L,
                            Color = 5,
                            Days = 16,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 3,
                            AvailabilitySlotId = 8L,
                            Color = 7,
                            Days = 5,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 1,
                            AvailabilitySlotId = 9L,
                            Color = 6,
                            Days = 16,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 3,
                            AvailabilitySlotId = 10L,
                            Color = 3,
                            Days = 11,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2021, 4, 28, 9, 29, 9, 409, DateTimeKind.Unspecified).AddTicks(6212),
                            CreatedBy = 1L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://horacio.name",
                            LocationId = 3L,
                            Name = "ut",
                            Size = 35,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quibusdam adipisci quia aliquid velit perferendis porro quia modi dicta. Dicta facere et et fugiat et voluptatem voluptatum. Distinctio saepe laborum asperiores dolorem. Eum et rem corrupti. Nihil modi expedita neque et. Aut id omnis sed harum maxime."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 3, 6, 4, 34, 51, 8, DateTimeKind.Unspecified).AddTicks(5160),
                            CreatedBy = 2L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://stephany.biz",
                            LocationId = 3L,
                            Name = "labore",
                            Size = 17,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Magnam sed ut quis omnis corporis.\nBeatae delectus et odio consequuntur natus illo et expedita et.\nCum aut quas tempore vero voluptatem optio qui natus qui.\nIncidunt quam corporis voluptatibus rerum culpa animi explicabo molestiae temporibus.\nExpedita esse in eos autem facilis."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 3, 9, 4, 8, 6, 388, DateTimeKind.Unspecified).AddTicks(2423),
                            CreatedBy = 3L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://eldon.name",
                            LocationId = 3L,
                            Name = "libero",
                            Size = 35,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Labore rem cum occaecati dicta.\nDolor alias magnam.\nRecusandae in quasi soluta voluptas nihil eius.\nEt amet perferendis sunt repellat ab.\nAdipisci nam ut.\nQuidem omnis aut sequi."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 2, 20, 18, 28, 0, 682, DateTimeKind.Unspecified).AddTicks(2638),
                            CreatedBy = 4L,
                            Frequency = 23,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://carroll.biz",
                            LocationId = 3L,
                            Name = "delectus",
                            Size = 58,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Excepturi ratione beatae beatae quaerat.\nNostrum voluptates iure.\nAtque corporis non nostrum odit est."
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 11, 30, 16, 32, 11, 782, DateTimeKind.Unspecified).AddTicks(2325),
                            CreatedBy = 5L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://nicholaus.org",
                            LocationId = 4L,
                            Name = "ut",
                            Size = 47,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "sint"
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 1, 11, 16, 48, 32, 846, DateTimeKind.Unspecified).AddTicks(3747),
                            CreatedBy = 6L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://florian.net",
                            LocationId = 5L,
                            Name = "consequuntur",
                            Size = 27,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Voluptatibus ipsa vel ad aut dolorum saepe rem quidem. Adipisci facilis sapiente ut esse ut aut. Omnis provident consequuntur voluptatibus voluptatibus."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 12, 1, 14, 13, 49, 311, DateTimeKind.Unspecified).AddTicks(2250),
                            CreatedBy = 7L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://alexandria.net",
                            LocationId = 2L,
                            Name = "qui",
                            Size = 47,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Molestias eos repellat beatae dolorum ea nostrum voluptatem eos ut."
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 1, 1, 16, 16, 16, 62, DateTimeKind.Unspecified).AddTicks(5523),
                            CreatedBy = 8L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://annetta.net",
                            LocationId = 5L,
                            Name = "totam",
                            Size = 57,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Voluptatem sit animi itaque nemo laudantium.\nPariatur quibusdam magni ut.\nNon voluptatem culpa minima dolorum dolor molestiae quis.\nUt illo fugiat tempore asperiores omnis iure unde.\nQui rerum ipsa est.\nRerum pariatur aut et laudantium molestiae eaque magnam cumque nemo."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2021, 3, 28, 18, 55, 34, 72, DateTimeKind.Unspecified).AddTicks(7119),
                            CreatedBy = 9L,
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://delmer.name",
                            LocationId = 1L,
                            Name = "aut",
                            Size = 31,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Nihil temporibus voluptas possimus ut quod. Quod est quibusdam consectetur nisi laudantium et voluptas. Asperiores dicta impedit. Iusto deleniti qui a qui. Sit nam sequi assumenda modi."
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 2, 12, 22, 42, 25, 873, DateTimeKind.Unspecified).AddTicks(5477),
                            CreatedBy = 10L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://kristoffer.biz",
                            LocationId = 1L,
                            Name = "et",
                            Size = 37,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "dolorum"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 7L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 1, 23, 43, 43, 337, DateTimeKind.Unspecified).AddTicks(1935),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 23, 22, 58, 20, 994, DateTimeKind.Unspecified).AddTicks(6546),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 4, 23, 14, 13, 49, 115, DateTimeKind.Unspecified).AddTicks(3452),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 5, 4, 8, 52, 34, 269, DateTimeKind.Unspecified).AddTicks(9379),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 9, 20, 17, 8, 250, DateTimeKind.Unspecified).AddTicks(6322),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 5, 21, 7, 33, 49, 423, DateTimeKind.Unspecified).AddTicks(8180),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 4, 23, 19, 37, 23, 332, DateTimeKind.Unspecified).AddTicks(3138),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 13, 11, 48, 55, 374, DateTimeKind.Unspecified).AddTicks(849),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 6, 27, 4, 58, 59, 481, DateTimeKind.Unspecified).AddTicks(4372),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 15, 7, 56, 6, 916, DateTimeKind.Unspecified).AddTicks(2028),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 10L,
                            Email = "Teresa46@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 5, 9, 24, 28, 690, DateTimeKind.Unspecified).AddTicks(1948), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Teresa O'Keefe"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 4L,
                            Email = "Maggie38@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 31, 8, 13, 31, 536, DateTimeKind.Unspecified).AddTicks(3432), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Maggie Stracke"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 10L,
                            Email = "Santiago_Collier32@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 3, 0, 29, 23, 129, DateTimeKind.Unspecified).AddTicks(7763), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Santiago Collier"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            Email = "Lynn.Beahan@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 15, 3, 10, 6, 754, DateTimeKind.Unspecified).AddTicks(5221), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lynn Beahan"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 9L,
                            Email = "Becky_Schumm34@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 8, 21, 21, 4, 34, 237, DateTimeKind.Unspecified).AddTicks(156), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Becky Schumm"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 7L,
                            Email = "Lois78@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 8, 5, 5, 52, 58, 657, DateTimeKind.Unspecified).AddTicks(7436), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lois Schinner"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 9L,
                            Email = "Louise_Cole@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 20, 6, 46, 0, 659, DateTimeKind.Unspecified).AddTicks(2183), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Louise Cole"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 9L,
                            Email = "Victoria.Gutmann64@hotmail.co",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 18, 6, 22, 56, 202, DateTimeKind.Unspecified).AddTicks(5071), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Victoria Gutmann"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 5L,
                            Email = "Janis_Hoeger32@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 25, 9, 51, 33, 334, DateTimeKind.Unspecified).AddTicks(2059), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Janis Hoeger"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 9L,
                            Email = "Jacqueline31@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 11, 9, 31, 16, 1, DateTimeKind.Unspecified).AddTicks(5325), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jacqueline Greenfelder"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7683), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7445), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7938), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7923), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7975), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(7963), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9053), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(8960), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9097), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9084), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9132), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9121), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9165), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9154), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9197), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9187), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9227), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9217), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9257), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 12, 6, 59, 626, DateTimeKind.Unspecified).AddTicks(9247), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Zoom"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "GoogleMeet"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Skype"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Name = "Slack"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2019, 8, 18, 1, 28, 33, 721, DateTimeKind.Unspecified).AddTicks(3088),
                            CreatedBy = 6L,
                            Description = "Est eum ipsam illum maiores voluptatibus itaque qu",
                            Duration = 11,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "ut",
                            StartTime = new DateTimeOffset(new DateTime(2023, 1, 7, 15, 0, 56, 582, DateTimeKind.Unspecified).AddTicks(3845), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 3, 9, 5, 2, 38, 16, DateTimeKind.Unspecified).AddTicks(8977),
                            CreatedBy = 8L,
                            Description = "Sint eius autem possimus ex distinctio explicabo n",
                            Duration = 57,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "et",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 13, 19, 46, 43, 186, DateTimeKind.Unspecified).AddTicks(2049), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2021, 5, 27, 9, 47, 28, 467, DateTimeKind.Unspecified).AddTicks(9695),
                            CreatedBy = 4L,
                            Description = "Praesentium reprehenderit nesciunt et.",
                            Duration = 38,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "dolorum",
                            StartTime = new DateTimeOffset(new DateTime(2023, 1, 19, 18, 32, 15, 870, DateTimeKind.Unspecified).AddTicks(2410), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2020, 9, 18, 3, 51, 25, 585, DateTimeKind.Unspecified).AddTicks(9433),
                            CreatedBy = 10L,
                            Description = "Ipsam numquam omnis. Voluptatem ad eveniet. Et cup",
                            Duration = 36,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "minus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 10, 1, 46, 54, 833, DateTimeKind.Unspecified).AddTicks(719), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2019, 7, 25, 12, 4, 22, 422, DateTimeKind.Unspecified).AddTicks(5893),
                            CreatedBy = 6L,
                            Description = "Ad recusandae voluptas ex est enim modi cumque und",
                            Duration = 38,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "quisquam",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 17, 12, 34, 1, 974, DateTimeKind.Unspecified).AddTicks(1686), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 8, 3, 20, 0, 36, 158, DateTimeKind.Unspecified).AddTicks(1742),
                            CreatedBy = 7L,
                            Description = "Debitis accusantium et et. Quos laudantium quia qu",
                            Duration = 29,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "dolore",
                            StartTime = new DateTimeOffset(new DateTime(2023, 1, 26, 13, 15, 7, 660, DateTimeKind.Unspecified).AddTicks(1717), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 6, 28, 13, 45, 20, 299, DateTimeKind.Unspecified).AddTicks(621),
                            CreatedBy = 7L,
                            Description = "Omnis repellat voluptatibus commodi corporis conse",
                            Duration = 30,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "rerum",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 2, 13, 42, 12, 325, DateTimeKind.Unspecified).AddTicks(2996), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2020, 6, 11, 23, 49, 19, 201, DateTimeKind.Unspecified).AddTicks(4009),
                            CreatedBy = 9L,
                            Description = "et",
                            Duration = 22,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "necessitatibus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 23, 23, 14, 25, 168, DateTimeKind.Unspecified).AddTicks(1955), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2019, 10, 27, 6, 25, 26, 756, DateTimeKind.Unspecified).AddTicks(3975),
                            CreatedBy = 2L,
                            Description = "Et cupiditate laborum.\nSit exercitationem voluptat",
                            Duration = 38,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "voluptas",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 31, 0, 2, 23, 202, DateTimeKind.Unspecified).AddTicks(7165), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 2, 15, 12, 21, 12, 479, DateTimeKind.Unspecified).AddTicks(4203),
                            CreatedBy = 9L,
                            Description = "Officia laudantium nihil omnis excepturi eius. Vol",
                            Duration = 43,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "incidunt",
                            StartTime = new DateTimeOffset(new DateTime(2023, 1, 14, 11, 9, 25, 175, DateTimeKind.Unspecified).AddTicks(4868), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "In debitis est et totam consequuntur. Voluptas totam odio aut eos blanditiis. Sit voluptas maiores reiciendis aut vel maiores id. Consequatur ut laudantium aut voluptatem est voluptatem esse. Reiciendis reiciendis illo vitae itaque. Repellat perferendis voluptatem repellat dicta et sit."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "facilisAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "molestiaeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Cumque dolor nemo quia ut et dicta sit.\nExplicabo explicabo odit ea laborum unde repellendus provident.\nEnim id velit eaque velit.\nFacere id vel excepturi id voluptatem aliquam voluptatem."
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Dolorem est non quidem possimus magni.AAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Ipsum dolor in delectus maiores.AAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Qui velit et hic quos quo doloribus voluptate.AAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Aut ex ipsam commodi distinctio soluta culpa fuga. Fuga ipsam temporibus architecto magnam repudiandae. Odio qui voluptate sed quo asperiores voluptatem qui est. Possimus quibusdam dignissimos ut consequatur. Officia nostrum sint et dolores."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "Est quaerat in rerum quae.AAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Repellat et nesciunt reiciendis nihil quisquam quasi quis."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Doloremque similique provident. Expedita voluptatum deleniti. Dolores cumque sequi ea culpa corporis cupiditate soluta non. Quas autem amet voluptas sunt quis reprehenderit blanditiis nihil ea.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/726.jpg",
                            Name = "Nikolaus LLC",
                            PageLink = "http://maud.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Ipsam omnis esse et eligendi excepturi autem a.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/383.jpg",
                            Name = "Hoppe Inc",
                            PageLink = "http://jett.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Eveniet et veniam similique reiciendis voluptatem eum aut.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1183.jpg",
                            Name = "Medhurst LLC",
                            PageLink = "https://tillman.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "quibusdam",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/196.jpg",
                            Name = "Stiedemann - Senger",
                            PageLink = "http://rhett.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "At ducimus ex consequatur.\nNumquam ut minus ut non nulla ipsum.\nQuis quo quia.\nLibero est error.\nEt dolorum perspiciatis totam.\nSint sed maiores aspernatur.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1099.jpg",
                            Name = "Boehm, Jerde and Wolf",
                            PageLink = "http://russel.net",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Dicta tempore provident.\nQuis placeat iste fugit.\nAut inventore consequuntur dicta aut ratione quia sint.\nIn aut ullam.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1180.jpg",
                            Name = "Bahringer, Kihn and Huels",
                            PageLink = "https://hilda.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Consectetur molestiae eius neque architecto consequuntur reiciendis. Qui tenetur possimus nesciunt cum. In et sit suscipit rerum quo impedit. Voluptates inventore quidem aut accusamus perferendis magni. Temporibus adipisci qui quis aut eos natus. Provident ad alias id aut.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1020.jpg",
                            Name = "Schaden Inc",
                            PageLink = "https://jasper.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Laudantium quo earum.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1236.jpg",
                            Name = "O'Connell, Mante and Veum",
                            PageLink = "http://fermin.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Aperiam numquam expedita ratione impedit animi. Et consequatur nesciunt unde saepe repellat sequi reprehenderit laudantium nisi. Eos sunt amet. Voluptates amet quo rerum. Et aperiam sit aut cupiditate ab et ipsa. Deleniti in accusamus.",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1113.jpg",
                            Name = "Vandervort Group",
                            PageLink = "http://janiya.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "quia",
                            IsDeleted = false,
                            LogoPath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/428.jpg",
                            Name = "Bins - Ward",
                            PageLink = "https://zelda.info",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 9
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Shannon.Mohr88@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/546.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Shannon Mohr",
                            PhoneNumber = "(823) 967-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Warren55@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/891.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Warren Donnelly",
                            PhoneNumber = "736.762.82",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Elbert.Klocko78@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1203.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Elbert Klocko",
                            PhoneNumber = "(222) 922-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Janis87@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/964.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Janis Ullrich",
                            PhoneNumber = "(261) 273-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Cheryl72@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1112.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Cheryl Towne",
                            PhoneNumber = "991.929.66",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Willie.Smitham@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/863.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Willie Smitham",
                            PhoneNumber = "478-570-48",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Wendy79@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/535.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Wendy Lindgren",
                            PhoneNumber = "(698) 389-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Ian.Jones@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/729.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Ian Jones",
                            PhoneNumber = "499-390-05",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Hector.Marvin@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/820.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Hector Marvin",
                            PhoneNumber = "1-861-709-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Inez.Collier@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/395.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Inez Collier",
                            PhoneNumber = "463-684-90",
                            TimeFormat = 1,
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
