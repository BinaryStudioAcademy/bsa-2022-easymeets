// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220817103735_ChangeLocationToEnum")]
    partial class ChangeLocationToEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 2,
                            AvailabilitySlotId = 1L,
                            Color = 4,
                            Days = 11,
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            AvailabilitySlotId = 2L,
                            Color = 1,
                            Days = 24,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 1,
                            AvailabilitySlotId = 3L,
                            Color = 8,
                            Days = 24,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 1,
                            AvailabilitySlotId = 4L,
                            Color = 6,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            AvailabilitySlotId = 5L,
                            Color = 1,
                            Days = 13,
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 3,
                            AvailabilitySlotId = 6L,
                            Color = 8,
                            Days = 16,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 1,
                            AvailabilitySlotId = 7L,
                            Color = 2,
                            Days = 2,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 2,
                            AvailabilitySlotId = 8L,
                            Color = 2,
                            Days = 11,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 1,
                            AvailabilitySlotId = 9L,
                            Color = 2,
                            Days = 1,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 1,
                            AvailabilitySlotId = 10L,
                            Color = 4,
                            Days = 1,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 7, 26, 6, 38, 9, 872, DateTimeKind.Unspecified).AddTicks(5378),
                            CreatedBy = 1L,
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://kurtis.net",
                            LocationType = 2,
                            Name = "accusantium",
                            Size = 37,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "In voluptas porro."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 10, 1, 8, 14, 9, 532, DateTimeKind.Unspecified).AddTicks(8802),
                            CreatedBy = 2L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://martine.net",
                            LocationType = 1,
                            Name = "repellat",
                            Size = 33,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quia fuga sint. Aut sequi laudantium omnis libero. Explicabo nulla molestiae."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 7, 15, 23, 30, 15, 739, DateTimeKind.Unspecified).AddTicks(4083),
                            CreatedBy = 3L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://tina.com",
                            LocationType = 2,
                            Name = "eius",
                            Size = 23,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "In maiores autem vel delectus et ullam illo maiores explicabo."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 10, 4, 2, 15, 34, 515, DateTimeKind.Unspecified).AddTicks(8074),
                            CreatedBy = 4L,
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://elta.name",
                            LocationType = 0,
                            Name = "omnis",
                            Size = 40,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quod esse quos hic ad tenetur consequuntur."
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 11, 15, 1, 27, 14, 10, DateTimeKind.Unspecified).AddTicks(1787),
                            CreatedBy = 5L,
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://antonio.net",
                            LocationType = 1,
                            Name = "veritatis",
                            Size = 34,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Ducimus numquam aut est ut autem amet.\nQuia quas id ratione."
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2019, 8, 1, 18, 9, 0, 695, DateTimeKind.Unspecified).AddTicks(9446),
                            CreatedBy = 6L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://fredy.name",
                            LocationType = 2,
                            Name = "debitis",
                            Size = 41,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Autem magnam exercitationem fugit quo."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2021, 1, 28, 9, 11, 19, 437, DateTimeKind.Unspecified).AddTicks(2516),
                            CreatedBy = 7L,
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://guy.com",
                            LocationType = 1,
                            Name = "aut",
                            Size = 30,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Molestias saepe placeat rem non ipsum incidunt.\nVeritatis et rerum neque fugit consequuntur quis quibusdam.\nProvident cumque aut neque consequuntur delectus.\nArchitecto non blanditiis consequuntur eos fugiat.\nIpsum explicabo est voluptas.\nSit eaque dolorum."
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 6, 3, 8, 48, 34, 329, DateTimeKind.Unspecified).AddTicks(8625),
                            CreatedBy = 8L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://baylee.biz",
                            LocationType = 1,
                            Name = "neque",
                            Size = 19,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Necessitatibus debitis sit nam neque reprehenderit harum esse sapiente.\nIpsam occaecati voluptatum."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 4, 6, 3, 4, 10, 785, DateTimeKind.Unspecified).AddTicks(7474),
                            CreatedBy = 9L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://oleta.biz",
                            LocationType = 1,
                            Name = "accusamus",
                            Size = 59,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "ut"
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2019, 10, 26, 9, 11, 52, 22, DateTimeKind.Unspecified).AddTicks(4091),
                            CreatedBy = 10L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://kian.net",
                            LocationType = 2,
                            Name = "quis",
                            Size = 39,
                            TeamId = 3L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "quos"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 6, 10, 18, 38, 36, 131, DateTimeKind.Unspecified).AddTicks(5441),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 27, 1, 8, 8, 333, DateTimeKind.Unspecified).AddTicks(2953),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 5, 10, 21, 16, 15, 621, DateTimeKind.Unspecified).AddTicks(8992),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 22, 0, 50, 14, 494, DateTimeKind.Unspecified).AddTicks(2517),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 2, 19, 9, 40, 4, 468, DateTimeKind.Unspecified).AddTicks(4846),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 5, 6, 20, 57, 471, DateTimeKind.Unspecified).AddTicks(5473),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 11, 9, 15, 38, 6, 560, DateTimeKind.Unspecified).AddTicks(8522),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 31, 19, 49, 50, 906, DateTimeKind.Unspecified).AddTicks(6597),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 11, 4, 52, 7, 518, DateTimeKind.Unspecified).AddTicks(6706),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 9, 11, 32, 25, 261, DateTimeKind.Unspecified).AddTicks(1458),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 8L,
                            Email = "Oscar_Schmeler3@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 31, 0, 32, 43, 589, DateTimeKind.Unspecified).AddTicks(1827), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Oscar Schmeler"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            Email = "Beverly_Tromp0@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 28, 14, 57, 1, 998, DateTimeKind.Unspecified).AddTicks(1539), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Beverly Tromp"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 5L,
                            Email = "Eddie_Ritchie83@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 17, 6, 24, 15, 792, DateTimeKind.Unspecified).AddTicks(2546), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Eddie Ritchie"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            Email = "Daryl.Cormier51@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 20, 1, 42, 48, 106, DateTimeKind.Unspecified).AddTicks(2883), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Daryl Cormier"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 10L,
                            Email = "Cathy.Lueilwitz@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 16, 3, 15, 53, 997, DateTimeKind.Unspecified).AddTicks(9670), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Cathy Lueilwitz"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 3L,
                            Email = "Lyle.Gottlieb@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 16, 5, 3, 34, 944, DateTimeKind.Unspecified).AddTicks(9822), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lyle Gottlieb"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            Email = "Raquel.Mertz@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 6, 21, 51, 54, 536, DateTimeKind.Unspecified).AddTicks(189), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Raquel Mertz"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 10L,
                            Email = "Bernice_Lockman@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 9, 24, 3, 14, 51, 167, DateTimeKind.Unspecified).AddTicks(1515), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Bernice Lockman"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 10L,
                            Email = "Marcia_Tromp39@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 10, 11, 39, 57, 711, DateTimeKind.Unspecified).AddTicks(1875), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marcia Tromp"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 6L,
                            Email = "Ginger_Treutel@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 16, 1, 39, 53, 372, DateTimeKind.Unspecified).AddTicks(5357), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ginger Treutel"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4128), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4024), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4222), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4216), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4239), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4234), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4254), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4249), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4269), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4264), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4284), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4279), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4299), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4294), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4314), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4309), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4329), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4324), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4344), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 13, 37, 34, 554, DateTimeKind.Unspecified).AddTicks(4339), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2019, 11, 30, 22, 39, 14, 149, DateTimeKind.Unspecified).AddTicks(6332),
                            CreatedBy = 5L,
                            Description = "Atque ipsam reiciendis qui numquam minima. Et fugi",
                            Duration = 43,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "voluptatem",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 30, 1, 8, 59, 820, DateTimeKind.Unspecified).AddTicks(6076), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 2, 29, 13, 32, 42, 376, DateTimeKind.Unspecified).AddTicks(8098),
                            CreatedBy = 1L,
                            Description = "Ea soluta cupiditate.\nQuia quo totam qui dolores f",
                            Duration = 15,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "ea",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 2, 8, 56, 34, 773, DateTimeKind.Unspecified).AddTicks(3774), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2019, 8, 8, 5, 35, 42, 415, DateTimeKind.Unspecified).AddTicks(5769),
                            CreatedBy = 5L,
                            Description = "Quia iusto provident non tenetur accusamus vero ap",
                            Duration = 35,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "repellendus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 1, 4, 35, 23, 666, DateTimeKind.Unspecified).AddTicks(251), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2019, 9, 7, 21, 19, 49, 2, DateTimeKind.Unspecified).AddTicks(6221),
                            CreatedBy = 1L,
                            Description = "Quae quis libero voluptate repellendus asperiores.",
                            Duration = 35,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "qui",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 2, 16, 9, 27, 555, DateTimeKind.Unspecified).AddTicks(4794), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2019, 7, 28, 4, 30, 41, 927, DateTimeKind.Unspecified).AddTicks(3310),
                            CreatedBy = 3L,
                            Description = "Voluptatibus aperiam veritatis quam officiis est p",
                            Duration = 22,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "adipisci",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 13, 23, 35, 10, 576, DateTimeKind.Unspecified).AddTicks(17), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 1, 24, 17, 45, 48, 104, DateTimeKind.Unspecified).AddTicks(9784),
                            CreatedBy = 3L,
                            Description = "Aliquid eveniet aut iure sint mollitia laudantium",
                            Duration = 52,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "eligendi",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 9, 6, 59, 43, 244, DateTimeKind.Unspecified).AddTicks(7062), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 4, 9, 18, 39, 58, 472, DateTimeKind.Unspecified).AddTicks(6442),
                            CreatedBy = 6L,
                            Description = "Consectetur sequi cupiditate sed.",
                            Duration = 29,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "exercitationem",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 9, 7, 33, 4, 773, DateTimeKind.Unspecified).AddTicks(4818), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2019, 10, 31, 7, 18, 42, 320, DateTimeKind.Unspecified).AddTicks(5846),
                            CreatedBy = 9L,
                            Description = "rem",
                            Duration = 21,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "velit",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 24, 16, 3, 15, 331, DateTimeKind.Unspecified).AddTicks(9958), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2021, 7, 8, 17, 18, 44, 365, DateTimeKind.Unspecified).AddTicks(2847),
                            CreatedBy = 6L,
                            Description = "Sunt aliquam quae consequuntur natus placeat vel v",
                            Duration = 42,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "est",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 29, 9, 7, 56, 857, DateTimeKind.Unspecified).AddTicks(9254), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 3, 3, 3, 53, 39, 895, DateTimeKind.Unspecified).AddTicks(1116),
                            CreatedBy = 1L,
                            Description = "Modi et non veniam.",
                            Duration = 38,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "optio",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 25, 13, 17, 15, 599, DateTimeKind.Unspecified).AddTicks(2169), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Commodi reiciendis nam.\nVoluptas et magnam maxime.\nNostrum alias dicta voluptatem reiciendis velit cum quibusdam architecto eius.\nQuo reprehenderit neque.\nA ipsa placeat ipsam."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Culpa eius aliquid et quibusdam quibusdam assumenda vero ducimus eum.\nEt quis error vero.\nAliquid perferendis tenetur.\nEt iure voluptas laborum at facilis qui porro.\nQui consequuntur id necessitatibus aut dicta qui aut non aut.\nExercitationem omnis et delectus nihil occaecati consectetur iste quam."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Asperiores iusto similique.AAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Corrupti reiciendis doloribus saepe accusantium.AA"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "ipsumAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "accusamusAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "repellendusAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "etAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "esseAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "maximeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "quia",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "O'Hara - Shanahan",
                            PageLink = "https://dedrick.info",
                            TimeZone = "Europe/St"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Modi tenetur aspernatur.\nNon voluptas quia officia.\nVeniam debitis at est omnis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gibson, Murazik and Stiedemann",
                            PageLink = "https://justice.name",
                            TimeZone = "Europe/Lo"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Laboriosam officiis odit facilis est.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Altenwerth - Beer",
                            PageLink = "https://diego.org",
                            TimeZone = "America/C"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Eum enim est porro odit et.\nSapiente sapiente non vitae repudiandae animi aut vel ratione.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Stoltenberg, Nader and Conroy",
                            PageLink = "https://yasmin.info",
                            TimeZone = "Europe/Be"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Temporibus provident ipsa iste debitis rerum nesciunt consequatur et.\nRem aliquid qui aliquam totam qui ratione consequatur et cum.\nUt eligendi et doloribus illum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Kulas LLC",
                            PageLink = "http://lilyan.org",
                            TimeZone = "Africa/Al"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Quia sunt et.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Walsh LLC",
                            PageLink = "https://bailey.info",
                            TimeZone = "America/G"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Magni sit et nihil esse eos.\nConsequuntur quia sed voluptas accusamus excepturi iste quod.\nAt voluptatum asperiores omnis dolor voluptatibus veniam quaerat.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Trantow, Cremin and West",
                            PageLink = "https://cade.org",
                            TimeZone = "Atlantic/"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Et eligendi amet suscipit fugit.\nAlias est in assumenda quasi eius qui et ducimus.\nIn quos qui nobis eveniet error.\nSunt atque non sed id non blanditiis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Murphy and Sons",
                            PageLink = "https://petra.org",
                            TimeZone = "Asia/Seou"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Enim velit qui quod ad qui ab enim.\nSit animi quia.\nQuis facilis nesciunt harum qui.\nAut quae aspernatur accusamus sunt consequatur assumenda.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Becker, Monahan and Cremin",
                            PageLink = "http://brayan.org",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "expedita",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Block LLC",
                            PageLink = "http://winnifred.org",
                            TimeZone = "Europe/Lj"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 7
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int?>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Dolores57@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/670.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Dolores Grant",
                            PhoneNumber = "982-883-70",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Genevieve.Zulauf@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/384.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Genevieve Zulauf",
                            PhoneNumber = "203-311-54",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Warren98@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/736.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Warren Grimes",
                            PhoneNumber = "(971) 612-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Jared_Murray@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/217.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jared Murray",
                            PhoneNumber = "(575) 441-",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Josh_Hettinger23@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/397.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Josh Hettinger",
                            PhoneNumber = "1-649-900-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Jorge29@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/338.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jorge Ortiz",
                            PhoneNumber = "(927) 472-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Sophia_Weissnat@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1016.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Sophia Weissnat",
                            PhoneNumber = "(695) 263-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Tonya_Huels@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/921.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Tonya Huels",
                            PhoneNumber = "1-733-373-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Johnathan.Parker@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/223.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Johnathan Parker",
                            PhoneNumber = "1-230-780-",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Ashley.Gutmann@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1081.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Ashley Gutmann",
                            PhoneNumber = "727.346.60",
                            TimeFormat = 1,
                            TimeZone = 5
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
