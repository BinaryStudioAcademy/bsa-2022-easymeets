// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220817203756_CreateSchedule")]
    partial class CreateSchedule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 2,
                            AvailabilitySlotId = 1L,
                            Color = 2,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 3,
                            AvailabilitySlotId = 2L,
                            Color = 3,
                            Days = 22,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 3,
                            AvailabilitySlotId = 3L,
                            Color = 5,
                            Days = 5,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 1,
                            AvailabilitySlotId = 4L,
                            Color = 5,
                            Days = 23,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 1,
                            AvailabilitySlotId = 5L,
                            Color = 6,
                            Days = 30,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 2,
                            AvailabilitySlotId = 6L,
                            Color = 1,
                            Days = 26,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 3,
                            AvailabilitySlotId = 7L,
                            Color = 3,
                            Days = 22,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 2,
                            AvailabilitySlotId = 8L,
                            Color = 8,
                            Days = 5,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 2,
                            AvailabilitySlotId = 9L,
                            Color = 4,
                            Days = 21,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 3,
                            AvailabilitySlotId = 10L,
                            Color = 1,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PasswordProtectionIsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 11, 27, 10, 17, 9, 924, DateTimeKind.Unspecified).AddTicks(1),
                            CreatedBy = 1L,
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://sydnee.org",
                            LocationType = 1,
                            Name = "quia",
                            PasswordProtectionIsUsed = false,
                            Size = 39,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Voluptatem alias molestiae ipsam saepe quidem id quia saepe sequi."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 3, 13, 1, 24, 47, 743, DateTimeKind.Unspecified).AddTicks(3643),
                            CreatedBy = 2L,
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://antonietta.name",
                            LocationType = 0,
                            Name = "voluptates",
                            PasswordProtectionIsUsed = false,
                            Size = 48,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Dolorum iure omnis exercitationem numquam aliquid nam in mollitia veniam."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 6, 14, 22, 23, 59, 281, DateTimeKind.Unspecified).AddTicks(9970),
                            CreatedBy = 3L,
                            Frequency = 30,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://brain.info",
                            LocationType = 0,
                            Name = "quia",
                            PasswordProtectionIsUsed = false,
                            Size = 27,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Tenetur sint ipsum ut."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 10, 2, 3, 58, 13, 359, DateTimeKind.Unspecified).AddTicks(4265),
                            CreatedBy = 4L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://sadie.info",
                            LocationType = 1,
                            Name = "harum",
                            PasswordProtectionIsUsed = false,
                            Size = 16,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Modi eligendi doloremque qui laudantium neque nihil."
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 9, 13, 14, 10, 47, 838, DateTimeKind.Unspecified).AddTicks(6357),
                            CreatedBy = 5L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://estel.net",
                            LocationType = 2,
                            Name = "molestiae",
                            PasswordProtectionIsUsed = false,
                            Size = 20,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "qui"
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 7, 9, 19, 20, 43, 548, DateTimeKind.Unspecified).AddTicks(8216),
                            CreatedBy = 6L,
                            Frequency = 24,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://henry.name",
                            LocationType = 1,
                            Name = "ad",
                            PasswordProtectionIsUsed = false,
                            Size = 48,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Natus inventore perspiciatis a.\nSint iure ex ea ipsam alias tempora sunt alias vero.\nNostrum omnis ad in.\nOmnis odio nisi ex consequatur.\nVeniam sit est sunt voluptatibus ratione et temporibus eveniet eum."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 7, 29, 18, 22, 39, 7, DateTimeKind.Unspecified).AddTicks(5719),
                            CreatedBy = 7L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://beaulah.name",
                            LocationType = 1,
                            Name = "aut",
                            PasswordProtectionIsUsed = false,
                            Size = 60,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "voluptas"
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 7, 30, 23, 51, 54, 469, DateTimeKind.Unspecified).AddTicks(2706),
                            CreatedBy = 8L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://saul.org",
                            LocationType = 2,
                            Name = "dolorum",
                            PasswordProtectionIsUsed = false,
                            Size = 37,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Esse reprehenderit et. Quas ad voluptas. Quaerat nesciunt ut eum illo. Laborum totam et qui."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 5, 3, 7, 26, 31, 561, DateTimeKind.Unspecified).AddTicks(9933),
                            CreatedBy = 9L,
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://phoebe.name",
                            LocationType = 0,
                            Name = "voluptatum",
                            PasswordProtectionIsUsed = false,
                            Size = 34,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Magnam quam est eum deleniti deserunt harum. Est rem atque vel velit distinctio dolorum quaerat aut suscipit. Inventore in adipisci unde architecto amet autem perferendis et quo."
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2019, 9, 17, 11, 42, 56, 64, DateTimeKind.Unspecified).AddTicks(2501),
                            CreatedBy = 10L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://antwan.net",
                            LocationType = 1,
                            Name = "totam",
                            PasswordProtectionIsUsed = false,
                            Size = 21,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Eaque est nulla quasi sit necessitatibus quo dolor. Autem nesciunt minus odio porro et non eos qui distinctio. Suscipit sed tempore non consequatur autem. Iure qui vitae neque et optio cupiditate modi sapiente. Sunt harum nisi sunt rerum."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 2, 5, 15, 59, 0, 905, DateTimeKind.Unspecified).AddTicks(3866),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 13, 9, 24, 32, 504, DateTimeKind.Unspecified).AddTicks(3943),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 25, 14, 3, 50, 311, DateTimeKind.Unspecified).AddTicks(3516),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 2, 3, 6, 46, 30, 819, DateTimeKind.Unspecified).AddTicks(6868),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 21, 3, 1, 51, 699, DateTimeKind.Unspecified).AddTicks(6612),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 6, 17, 19, 12, 38, 878, DateTimeKind.Unspecified).AddTicks(7117),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 10, 4, 3, 20, 5, 229, DateTimeKind.Unspecified).AddTicks(6046),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 19, 19, 1, 15, 611, DateTimeKind.Unspecified).AddTicks(871),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 6, 2, 29, 9, 257, DateTimeKind.Unspecified).AddTicks(9280),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 7L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 2, 16, 20, 42, 507, DateTimeKind.Unspecified).AddTicks(2174),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 9L,
                            Email = "Ramona_Oberbrunner5@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 20, 0, 51, 32, 135, DateTimeKind.Unspecified).AddTicks(1529), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ramona Oberbrunner"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 3L,
                            Email = "Hugo.Windler@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 19, 22, 51, 28, 368, DateTimeKind.Unspecified).AddTicks(6043), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Hugo Windler"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 9L,
                            Email = "Spencer_Bergnaum@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 4, 10, 38, 34, 631, DateTimeKind.Unspecified).AddTicks(4757), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Spencer Bergnaum"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            Email = "Matthew.Barrows54@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 25, 19, 35, 24, 216, DateTimeKind.Unspecified).AddTicks(985), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Matthew Barrows"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 1L,
                            Email = "Harold_Kshlerin@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 18, 2, 43, 19, 959, DateTimeKind.Unspecified).AddTicks(8934), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Harold Kshlerin"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 10L,
                            Email = "Alma.Okuneva2@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 8, 15, 12, 21, 51, 607, DateTimeKind.Unspecified).AddTicks(6545), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Alma Okuneva"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 6L,
                            Email = "Wilfred.Stokes@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 1, 9, 10, 12, 814, DateTimeKind.Unspecified).AddTicks(8245), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Wilfred Stokes"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 6L,
                            Email = "Lloyd41@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 18, 21, 35, 14, 438, DateTimeKind.Unspecified).AddTicks(9652), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lloyd Morissette"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 3L,
                            Email = "Joann14@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 8, 22, 22, 43, 6, 892, DateTimeKind.Unspecified).AddTicks(279), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Joann Homenick"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 9L,
                            Email = "Jamie45@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 27, 16, 23, 45, 240, DateTimeKind.Unspecified).AddTicks(787), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jamie Monahan"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8510), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8325), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8726), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8709), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8759), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8749), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8795), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8784), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8828), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8817), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8861), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8850), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8895), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8884), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8926), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8916), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8958), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8948), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8990), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 18, 23, 37, 54, 433, DateTimeKind.Unspecified).AddTicks(8980), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2019, 9, 27, 20, 54, 30, 974, DateTimeKind.Unspecified).AddTicks(6646),
                            CreatedBy = 8L,
                            Description = "Rerum recusandae voluptatem est dolores nemo non.",
                            Duration = 30,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "cum",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 16, 9, 43, 2, 55, DateTimeKind.Unspecified).AddTicks(1069), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 7, 7, 9, 34, 20, 673, DateTimeKind.Unspecified).AddTicks(9025),
                            CreatedBy = 9L,
                            Description = "Velit non totam natus asperiores accusamus nemo.\nQ",
                            Duration = 21,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "suscipit",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 18, 15, 47, 6, 642, DateTimeKind.Unspecified).AddTicks(7972), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2020, 9, 9, 6, 19, 55, 827, DateTimeKind.Unspecified).AddTicks(9583),
                            CreatedBy = 8L,
                            Description = "Iste magnam quod natus sit voluptatum.\nEt sunt rec",
                            Duration = 19,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "accusamus",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 8, 5, 47, 46, 659, DateTimeKind.Unspecified).AddTicks(6982), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2020, 7, 7, 19, 25, 52, 722, DateTimeKind.Unspecified).AddTicks(2110),
                            CreatedBy = 8L,
                            Description = "aspernatur",
                            Duration = 57,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "aspernatur",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 17, 13, 31, 27, 225, DateTimeKind.Unspecified).AddTicks(5807), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2021, 7, 15, 7, 30, 11, 303, DateTimeKind.Unspecified).AddTicks(9129),
                            CreatedBy = 8L,
                            Description = "explicabo",
                            Duration = 44,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "reiciendis",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 12, 2, 52, 15, 701, DateTimeKind.Unspecified).AddTicks(8001), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2021, 2, 3, 23, 30, 52, 885, DateTimeKind.Unspecified).AddTicks(4888),
                            CreatedBy = 5L,
                            Description = "Placeat aliquam sit debitis beatae qui voluptate a",
                            Duration = 58,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "beatae",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 17, 1, 33, 38, 511, DateTimeKind.Unspecified).AddTicks(9750), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 4, 3, 3, 21, 5, 138, DateTimeKind.Unspecified).AddTicks(7679),
                            CreatedBy = 8L,
                            Description = "provident",
                            Duration = 43,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "aperiam",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 26, 9, 4, 47, 433, DateTimeKind.Unspecified).AddTicks(2090), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 7, 15, 18, 6, 8, 44, DateTimeKind.Unspecified).AddTicks(7446),
                            CreatedBy = 3L,
                            Description = "Vitae dolorum eum nesciunt corrupti ab non aut rec",
                            Duration = 39,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "officia",
                            StartTime = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 53, 109, DateTimeKind.Unspecified).AddTicks(8527), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2020, 1, 24, 9, 53, 56, 834, DateTimeKind.Unspecified).AddTicks(1331),
                            CreatedBy = 3L,
                            Description = "Iste consequatur architecto.",
                            Duration = 24,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "et",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 25, 17, 39, 13, 950, DateTimeKind.Unspecified).AddTicks(964), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 2, 26, 23, 42, 44, 196, DateTimeKind.Unspecified).AddTicks(1071),
                            CreatedBy = 3L,
                            Description = "Blanditiis facilis libero et magnam.\nAut sunt est",
                            Duration = 19,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "fugiat",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 30, 2, 40, 11, 521, DateTimeKind.Unspecified).AddTicks(2698), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "asperioresAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Ullam quos expedita facilis. Officia ducimus dolore nisi totam sunt repudiandae. Nisi numquam explicabo aut totam. Quam quas voluptates inventore quia molestiae. Quam libero nobis atque rerum voluptatem eum."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "ipsaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "Ab dolore aut.\nIn expedita delectus perferendis voluptatem assumenda possimus beatae minus.\nCum sed exercitationem molestiae."
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Expedita hic et quaerat nemo ab.\nOccaecati exercitationem necessitatibus corporis dolorem.\nCommodi rem et a laborum id et assumenda vel."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Velit iusto quia dignissimos eligendi quisquam.AAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "delectusAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Eligendi qui voluptatem officia expedita.AAAAAAAAA"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Maiores nobis veniam. Ullam quidem repellendus sint dolor. Tempore delectus unde. Qui cumque iusto dignissimos."
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Qui quos velit sint.\nVel rerum dicta ea illum minus.\nVoluptas asperiores exercitationem quae eligendi eaque.\nRecusandae delectus cupiditate alias dolor alias iste odio dolor autem.\nExplicabo minus est nobis asperiores veniam neque ipsam eaque ipsa.\nQuae debitis enim voluptatum."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<bool>("WithTeamMembers")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            TimeZone = 127,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            TimeZone = -183,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            TimeZone = 250,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            TimeZone = -518,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            TimeZone = -447,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            TimeZone = -556,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            TimeZone = -268,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            TimeZone = -525,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            TimeZone = -605,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            TimeZone = -476,
                            WithTeamMembers = false
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItem");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 2L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 3L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 4L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 5L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 6L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 7L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 8L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 9L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 10L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 11L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 12L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 13L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 14L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 15L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 16L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 17L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 18L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 19L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 20L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 21L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 22L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 23L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 24L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 25L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 26L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 27L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 28L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 29L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 30L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 31L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 32L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 33L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 34L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 35L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 36L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 37L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 38L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 39L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 40L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 41L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 42L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 43L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 44L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 45L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 46L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 47L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 48L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 49L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 50L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 51L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 52L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 53L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 54L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 55L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 56L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 57L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 58L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 59L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 60L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 61L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 62L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 63L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 64L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 65L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 66L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 67L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 68L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 69L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 70L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SlotMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 4,
                            ScheduleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 2,
                            ScheduleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 7,
                            ScheduleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 3,
                            ScheduleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 1,
                            ScheduleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 1,
                            ScheduleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 1,
                            ScheduleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 5,
                            ScheduleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 4,
                            ScheduleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 9,
                            ScheduleId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "molestiae",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Lubowitz and Sons",
                            PageLink = "https://lyla.com",
                            TimeZone = "America/R"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Voluptate laudantium numquam ut dolorem.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Volkman, Halvorson and Schmitt",
                            PageLink = "http://claudine.biz",
                            TimeZone = "Africa/Jo"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "vitae",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Cummerata - Kohler",
                            PageLink = "http://marvin.info",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Et velit ea. Omnis delectus debitis asperiores. Impedit atque vel cum quis tempore. Repudiandae sit explicabo est autem et. Ipsum consequatur nesciunt sed quidem architecto nihil sint explicabo.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Kshlerin Inc",
                            PageLink = "http://mercedes.org",
                            TimeZone = "Asia/Rang"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Non ullam qui.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Stehr, Ward and Pfannerstill",
                            PageLink = "https://zelda.com",
                            TimeZone = "Europe/At"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "dignissimos",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Schultz - Kozey",
                            PageLink = "https://patrick.org",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Officiis ipsum quas doloribus ipsa expedita nihil incidunt vel.\nNihil quo nisi eius ea dolore provident molestiae saepe sed.\nOfficia et neque consequatur.\nMaiores culpa est est.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gleason, Jacobs and Cartwright",
                            PageLink = "http://hertha.net",
                            TimeZone = "Europe/Za"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "magni",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Shanahan, Waters and Waters",
                            PageLink = "https://bertha.com",
                            TimeZone = "Australia"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Voluptas porro ut itaque sunt provident repellat repudiandae qui est.\nFugiat est dicta harum.\nUt cumque ipsum et.\nRecusandae sapiente alias illum sit doloribus id provident id fuga.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Jacobson - Weber",
                            PageLink = "https://toby.com",
                            TimeZone = "Asia/Kras"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Et voluptatem sit qui doloribus dolorum laborum est sint. Laudantium a aut ut autem porro est commodi quos nihil. Hic dicta illo. Vel voluptas consequatur aperiam nihil eius explicabo sit ipsam nisi. Dolorem aut unde.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Tromp, Daugherty and Kilback",
                            PageLink = "https://jane.net",
                            TimeZone = "America/S"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int?>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Jennie_Stracke27@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/863.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jennie Stracke",
                            PhoneNumber = "276-743-01",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Neil.Mosciski@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/972.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Neil Mosciski",
                            PhoneNumber = "(391) 899-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Kelley_McLaughlin@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/192.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Kelley McLaughlin",
                            PhoneNumber = "1-738-210-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Charlotte.Franecki@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/306.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Charlotte Franecki",
                            PhoneNumber = "(478) 657-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Leroy3@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/677.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Leroy Harvey",
                            PhoneNumber = "1-328-225-",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Alan.Oberbrunner71@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/279.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Alan Oberbrunner",
                            PhoneNumber = "609-882-52",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Johnny.Marquardt@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1198.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Johnny Marquardt",
                            PhoneNumber = "837-788-80",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Pearl3@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/135.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Pearl Schaden",
                            PhoneNumber = "1-430-303-",
                            TimeFormat = 1,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Peter.Stokes@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/287.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Peter Stokes",
                            PhoneNumber = "1-763-560-",
                            TimeFormat = 0,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Melanie97@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/949.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Melanie Bogan",
                            PhoneNumber = "1-677-281-",
                            TimeFormat = 0,
                            TimeZone = 5
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("Schedule")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.Schedule", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("SlotMembers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("SlotMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("Members")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings");

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("SlotMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("SlotMembers");

                    b.Navigation("Slots");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
