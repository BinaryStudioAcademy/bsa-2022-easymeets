// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220818112934_CreateSchedule")]
    partial class CreateSchedule
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 3,
                            AvailabilitySlotId = 1L,
                            Color = 8,
                            Days = 27,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            AvailabilitySlotId = 2L,
                            Color = 5,
                            Days = 8,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 1,
                            AvailabilitySlotId = 3L,
                            Color = 3,
                            Days = 12,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 1,
                            AvailabilitySlotId = 4L,
                            Color = 4,
                            Days = 3,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            AvailabilitySlotId = 5L,
                            Color = 1,
                            Days = 9,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 1,
                            AvailabilitySlotId = 6L,
                            Color = 6,
                            Days = 13,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 2,
                            AvailabilitySlotId = 7L,
                            Color = 5,
                            Days = 6,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 1,
                            AvailabilitySlotId = 8L,
                            Color = 4,
                            Days = 20,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 1,
                            AvailabilitySlotId = 9L,
                            Color = 7,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 1,
                            AvailabilitySlotId = 10L,
                            Color = 5,
                            Days = 12,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PasswordProtectionIsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 6, 13, 17, 44, 46, 746, DateTimeKind.Unspecified).AddTicks(2701),
                            CreatedBy = 1L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://myles.info",
                            LocationType = 2,
                            Name = "non",
                            PasswordProtectionIsUsed = false,
                            Size = 54,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Nemo distinctio quo ipsa similique qui.\nDucimus est ea voluptas quos enim omnis excepturi nulla eius.\nQui cum ipsa.\nExercitationem nulla repellendus atque voluptatem omnis vel distinctio aut dolore."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 10, 23, 4, 37, 32, 611, DateTimeKind.Unspecified).AddTicks(8419),
                            CreatedBy = 2L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://layla.net",
                            LocationType = 1,
                            Name = "vitae",
                            PasswordProtectionIsUsed = false,
                            Size = 40,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "dolores"
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2021, 1, 23, 13, 41, 51, 773, DateTimeKind.Unspecified).AddTicks(7040),
                            CreatedBy = 3L,
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://terrance.org",
                            LocationType = 0,
                            Name = "quos",
                            PasswordProtectionIsUsed = false,
                            Size = 29,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Optio laudantium aliquid ex voluptas fugiat autem et aut minus. Sed nostrum tempore aut ipsa quo et ea quos. Ut ut nam deserunt quia autem culpa. Quia et ut et ut aliquam autem. Et ut id debitis saepe omnis et. Quos repellat quod rerum vitae rerum ut culpa et."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2019, 10, 10, 13, 5, 53, 511, DateTimeKind.Unspecified).AddTicks(5943),
                            CreatedBy = 4L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://mario.com",
                            LocationType = 1,
                            Name = "qui",
                            PasswordProtectionIsUsed = false,
                            Size = 37,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "error"
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 8, 15, 8, 36, 30, 837, DateTimeKind.Unspecified).AddTicks(471),
                            CreatedBy = 5L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://darion.org",
                            LocationType = 1,
                            Name = "ipsa",
                            PasswordProtectionIsUsed = false,
                            Size = 29,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "aut"
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2019, 11, 9, 23, 22, 41, 12, DateTimeKind.Unspecified).AddTicks(1269),
                            CreatedBy = 6L,
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://jayne.biz",
                            LocationType = 1,
                            Name = "vel",
                            PasswordProtectionIsUsed = false,
                            Size = 33,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Ut qui vero et sed qui facere quaerat. Blanditiis delectus necessitatibus molestias sunt odit vitae. Voluptates eum iste velit quia rerum. Illum labore amet voluptate eaque."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 7, 21, 10, 21, 42, 108, DateTimeKind.Unspecified).AddTicks(7603),
                            CreatedBy = 7L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://ferne.com",
                            LocationType = 2,
                            Name = "aut",
                            PasswordProtectionIsUsed = false,
                            Size = 36,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "illo"
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 8, 14, 9, 0, 32, 904, DateTimeKind.Unspecified).AddTicks(9022),
                            CreatedBy = 8L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://sherwood.com",
                            LocationType = 0,
                            Name = "accusantium",
                            PasswordProtectionIsUsed = false,
                            Size = 24,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Blanditiis repellat ea nam porro possimus at quidem possimus.\nNon accusamus qui et ut et eius qui."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 3, 11, 21, 53, 52, 278, DateTimeKind.Unspecified).AddTicks(8397),
                            CreatedBy = 9L,
                            Frequency = 23,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://celia.name",
                            LocationType = 2,
                            Name = "sapiente",
                            PasswordProtectionIsUsed = false,
                            Size = 50,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Voluptate rerum consequatur omnis ullam accusamus. Excepturi cumque nam in aliquid tempora quibusdam recusandae eius. Ut ut quod quo ea nam dolorem ullam ipsa corporis. Similique est iusto. Doloribus ad quas vel modi. Omnis quibusdam aut."
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 5, 15, 15, 54, 28, 546, DateTimeKind.Unspecified).AddTicks(5043),
                            CreatedBy = 10L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://hillard.org",
                            LocationType = 2,
                            Name = "quibusdam",
                            PasswordProtectionIsUsed = false,
                            Size = 50,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Impedit quia dolorum.\nVero et corporis voluptate eos et nihil ea esse.\nReprehenderit rerum molestias dolores.\nIpsa delectus voluptatem optio."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 5, 29, 5, 55, 5, 438, DateTimeKind.Unspecified).AddTicks(5824),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 27, 1, 47, 7, 125, DateTimeKind.Unspecified).AddTicks(8318),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 1, 22, 3, 45, 37, 668, DateTimeKind.Unspecified).AddTicks(554),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 2, 6, 11, 59, 54, 244, DateTimeKind.Unspecified).AddTicks(4869),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 21, 3, 3, 55, 465, DateTimeKind.Unspecified).AddTicks(3676),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 20, 8, 26, 45, 0, DateTimeKind.Unspecified).AddTicks(5710),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 25, 18, 33, 57, 779, DateTimeKind.Unspecified).AddTicks(6091),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 8, 20, 0, 50, 43, 595, DateTimeKind.Unspecified).AddTicks(8909),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 11, 8, 18, 25, 28, 155, DateTimeKind.Unspecified).AddTicks(6617),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 2, 8, 27, 26, 507, DateTimeKind.Unspecified).AddTicks(3967),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 2L,
                            Email = "Eugene.King@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 19, 12, 5, 49, 306, DateTimeKind.Unspecified).AddTicks(3484), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Eugene King"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 8L,
                            Email = "Andy_Schulist@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 6, 10, 55, 10, 869, DateTimeKind.Unspecified).AddTicks(9261), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Andy Schulist"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 5L,
                            Email = "Julian14@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 24, 16, 34, 46, 426, DateTimeKind.Unspecified).AddTicks(2390), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Julian Cummerata"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 7L,
                            Email = "Kenny_Hermann69@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 1, 20, 59, 46, 826, DateTimeKind.Unspecified).AddTicks(1486), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kenny Hermann"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 4L,
                            Email = "Mabel.Bahringer@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 4, 8, 35, 21, 940, DateTimeKind.Unspecified).AddTicks(819), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Mabel Bahringer"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            Email = "Marshall.Shanahan@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 1, 7, 10, 48, 935, DateTimeKind.Unspecified).AddTicks(6062), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marshall Shanahan"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 4L,
                            Email = "Alexandra88@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 14, 5, 36, 28, 340, DateTimeKind.Unspecified).AddTicks(2176), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Alexandra Wolff"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 6L,
                            Email = "Kelvin35@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 14, 1, 29, 31, 721, DateTimeKind.Unspecified).AddTicks(8759), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kelvin Torphy"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 8L,
                            Email = "Penny30@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 9, 26, 11, 56, 17, 844, DateTimeKind.Unspecified).AddTicks(4789), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Penny Purdy"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 9L,
                            Email = "Claire.Torp@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 24, 5, 21, 9, 548, DateTimeKind.Unspecified).AddTicks(5606), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Claire Torp"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3105), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(2990), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3286), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3277), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3305), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3299), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3323), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3317), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3340), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3334), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3357), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3352), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3375), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3369), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3392), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3386), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3415), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3407), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3439), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 14, 29, 32, 945, DateTimeKind.Unspecified).AddTicks(3431), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2019, 9, 8, 3, 45, 2, 849, DateTimeKind.Unspecified).AddTicks(7979),
                            CreatedBy = 2L,
                            Description = "earum",
                            Duration = 15,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "vel",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 29, 4, 12, 25, 148, DateTimeKind.Unspecified).AddTicks(1705), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2021, 1, 25, 13, 56, 2, 770, DateTimeKind.Unspecified).AddTicks(69),
                            CreatedBy = 6L,
                            Description = "enim",
                            Duration = 17,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "nihil",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 27, 4, 27, 36, 99, DateTimeKind.Unspecified).AddTicks(5078), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2020, 2, 25, 11, 58, 20, 817, DateTimeKind.Unspecified).AddTicks(4374),
                            CreatedBy = 4L,
                            Description = "Sit facere recusandae praesentium laborum minima n",
                            Duration = 47,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "numquam",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 17, 6, 59, 44, 747, DateTimeKind.Unspecified).AddTicks(9726), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2020, 5, 27, 21, 28, 37, 725, DateTimeKind.Unspecified).AddTicks(4411),
                            CreatedBy = 3L,
                            Description = "Voluptatem officiis nam delectus est iste odio seq",
                            Duration = 13,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "totam",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 15, 14, 11, 55, 723, DateTimeKind.Unspecified).AddTicks(1539), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2020, 3, 12, 5, 39, 31, 145, DateTimeKind.Unspecified).AddTicks(1720),
                            CreatedBy = 9L,
                            Description = "voluptas",
                            Duration = 28,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "autem",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 28, 6, 14, 40, 508, DateTimeKind.Unspecified).AddTicks(251), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 11, 14, 19, 9, 8, 629, DateTimeKind.Unspecified).AddTicks(6621),
                            CreatedBy = 5L,
                            Description = "Asperiores commodi reprehenderit quod mollitia deb",
                            Duration = 45,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "eaque",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 8, 9, 44, 5, 434, DateTimeKind.Unspecified).AddTicks(4035), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 6, 14, 6, 9, 34, 215, DateTimeKind.Unspecified).AddTicks(9567),
                            CreatedBy = 7L,
                            Description = "Voluptate molestiae qui rerum recusandae quasi sin",
                            Duration = 37,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "id",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 10, 19, 57, 10, 939, DateTimeKind.Unspecified).AddTicks(7956), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 1, 28, 8, 51, 16, 890, DateTimeKind.Unspecified).AddTicks(6985),
                            CreatedBy = 4L,
                            Description = "Ut perferendis enim.\nNemo totam quidem quod est su",
                            Duration = 46,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "temporibus",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 30, 10, 36, 10, 756, DateTimeKind.Unspecified).AddTicks(7441), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2020, 4, 25, 12, 38, 21, 145, DateTimeKind.Unspecified).AddTicks(1754),
                            CreatedBy = 4L,
                            Description = "Dolore rem commodi a assumenda eos temporibus. Rem",
                            Duration = 41,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "reiciendis",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 19, 11, 1, 8, 123, DateTimeKind.Unspecified).AddTicks(9836), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 2, 16, 20, 26, 56, 330, DateTimeKind.Unspecified).AddTicks(6767),
                            CreatedBy = 6L,
                            Description = "Rerum a ratione.",
                            Duration = 30,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "officia",
                            StartTime = new DateTimeOffset(new DateTime(2022, 8, 30, 0, 46, 56, 805, DateTimeKind.Unspecified).AddTicks(8199), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Aut quo laborum rerum modi. Explicabo et expedita totam optio voluptas ut reiciendis aut expedita. Sit aut deleniti beatae cumque omnis. Quibusdam nulla consequatur necessitatibus. Laudantium exercitationem recusandae possimus enim nostrum."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Necessitatibus rem et. Cupiditate sequi fugit veritatis non. Nesciunt tempora odio vel quaerat odit. Voluptas voluptatum voluptas vitae quia. Porro sunt explicabo velit."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "quibusdamAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "Sit eos et sunt deserunt eveniet incidunt eos id cupiditate.\nReprehenderit tenetur quia ullam inventore qui velit non.\nUllam nisi eveniet id ipsam est saepe esse.\nQuibusdam aut deleniti."
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "inventoreAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Voluptas numquam aut accusamus quidem maiores alias.\nSoluta quia sed esse voluptatem occaecati ea quia.\nBeatae voluptas quos ut aperiam odio."
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Id soluta culpa.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "Architecto sint occaecati.AAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Nam aperiam iste deserunt sed. Id et qui distinctio vero veritatis itaque dolores nesciunt. Vel non qui laborum error exercitationem voluptatem nam doloribus quod. Saepe aliquam corporis id harum minus ea molestiae voluptatum. Nihil aperiam omnis."
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Iste quaerat id doloremque rerum optio et.\nExplicabo ipsa repellendus sint unde.\nAccusantium sapiente consequuntur.\nUllam non asperiores quibusdam voluptatum.\nAliquam velit voluptatibus veniam et maiores et odio."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<bool>("WithTeamMembers")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            TimeZone = -120,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            TimeZone = -120,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            TimeZone = -600,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            TimeZone = 0,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            TimeZone = -300,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            TimeZone = 60,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            TimeZone = 660,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            TimeZone = -600,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            TimeZone = -540,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            TimeZone = 240,
                            WithTeamMembers = false
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 2L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 3L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 4L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 5L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 6L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 7L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 8L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 9L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 10L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 11L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 12L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 13L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 14L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 15L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 16L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 17L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 18L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 19L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 20L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 21L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 22L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 23L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 24L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 25L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 26L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 27L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 28L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 29L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 30L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 31L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 32L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 33L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 34L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 35L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 36L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 37L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 38L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 39L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 40L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 41L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 42L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 43L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 44L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 45L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 46L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 47L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 48L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 49L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 50L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 51L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 52L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 53L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 54L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 55L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 56L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 57L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 58L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 59L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 60L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 61L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 62L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 63L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 64L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 65L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 66L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 67L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 68L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 69L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 70L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SlotMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 3,
                            ScheduleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 6,
                            ScheduleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 8,
                            ScheduleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 6,
                            ScheduleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 8,
                            ScheduleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 10,
                            ScheduleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 10,
                            ScheduleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 3,
                            ScheduleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 1,
                            ScheduleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 9,
                            ScheduleId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Dolores magnam saepe eligendi quo et ducimus iusto tempora.\nNemo non aspernatur.\nEligendi aliquam corrupti qui rerum qui et quos ducimus.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Bergstrom Inc",
                            PageLink = "http://brooks.name",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Iusto doloribus provident expedita voluptatum sapiente neque officia.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Beatty - Hane",
                            PageLink = "http://shyanne.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Unde quas velit eos maxime ut.\nVoluptas qui voluptas rerum saepe consectetur esse ut ea.\nLabore est ut porro.\nEligendi omnis libero illo qui qui soluta deserunt praesentium.\nFacere illo dolorum quaerat animi enim quia velit id reiciendis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Ortiz Inc",
                            PageLink = "https://willis.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Vitae ut voluptas quos distinctio sint.\nEt et saepe ut earum aut sunt enim impedit.\nUt nihil aut facilis debitis architecto aut dolores qui.\nIusto molestias repellendus ut et sed qui quae voluptas.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Marvin, Langworth and Hickle",
                            PageLink = "http://stanford.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "dolores",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Howe Inc",
                            PageLink = "https://mariane.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Ut repellendus quia facilis nisi.\nUt quis eum.\nBeatae aperiam dolor alias.\nQuis sint molestiae laborum voluptatem.\nDebitis totam ex sed rerum molestiae quasi ut.\nIllo quia consequuntur culpa.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Langworth Group",
                            PageLink = "http://jamir.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Perspiciatis neque excepturi.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Nitzsche, Langworth and Mueller",
                            PageLink = "https://jada.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Dolores eligendi ut nulla rerum voluptate autem aspernatur.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Little, Schmitt and Bode",
                            PageLink = "http://josue.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "nostrum",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Mitchell, Friesen and Batz",
                            PageLink = "https://jaqueline.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Ut nesciunt nobis sequi cum dolores ea est eius.\nEt laboriosam natus atque cumque aspernatur cum.\nQuia dicta odio et earum eum molestiae ullam enim.\nCupiditate est corporis id tempore expedita rem perferendis alias.\nNam eos non iusto illo veritatis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Cremin and Sons",
                            PageLink = "http://ardella.com",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Jose95@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/777.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jose Pfannerstill",
                            PhoneNumber = "977.703.80",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Lewis.McLaughlin51@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/803.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Lewis McLaughlin",
                            PhoneNumber = "233.764.76",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Christine46@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1185.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Christine Runte",
                            PhoneNumber = "(617) 964-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Irvin_Predovic@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1238.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Irvin Predovic",
                            PhoneNumber = "324.768.92",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Norma16@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/947.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Norma Sipes",
                            PhoneNumber = "(574) 200-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Brittany_Langworth@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/214.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Brittany Langworth",
                            PhoneNumber = "(642) 801-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Nathaniel.Bernier3@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/359.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Nathaniel Bernier",
                            PhoneNumber = "407.512.45",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Rosemary_Lakin51@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/80.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Rosemary Lakin",
                            PhoneNumber = "(786) 837-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Lance_Trantow@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/343.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Lance Trantow",
                            PhoneNumber = "(821) 567-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Jenna_Bashirian23@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/505.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jenna Bashirian",
                            PhoneNumber = "1-472-974-",
                            TimeFormat = 0,
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("Schedule")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.Schedule", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("SlotMembers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("SlotMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("Members")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings");

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("SlotMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("SlotMembers");

                    b.Navigation("Slots");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
