// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220818172650_Add uid to user, unique uid and email")]
    partial class Adduidtouseruniqueuidandemail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 3,
                            AvailabilitySlotId = 1L,
                            Color = 6,
                            Days = 18,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            AvailabilitySlotId = 2L,
                            Color = 5,
                            Days = 15,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 3,
                            AvailabilitySlotId = 3L,
                            Color = 8,
                            Days = 16,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 1,
                            AvailabilitySlotId = 4L,
                            Color = 3,
                            Days = 15,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            AvailabilitySlotId = 5L,
                            Color = 4,
                            Days = 22,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 1,
                            AvailabilitySlotId = 6L,
                            Color = 4,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 3,
                            AvailabilitySlotId = 7L,
                            Color = 7,
                            Days = 9,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 2,
                            AvailabilitySlotId = 8L,
                            Color = 8,
                            Days = 7,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 2,
                            AvailabilitySlotId = 9L,
                            Color = 8,
                            Days = 26,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 1,
                            AvailabilitySlotId = 10L,
                            Color = 3,
                            Days = 30,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PasswordProtectionIsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 2, 3, 0, 28, 15, 611, DateTimeKind.Unspecified).AddTicks(1536),
                            CreatedBy = 1L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://walker.net",
                            LocationType = 2,
                            Name = "voluptatibus",
                            PasswordProtectionIsUsed = false,
                            Size = 49,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Soluta enim officia voluptatum soluta. Excepturi id fugiat ut odit odio tenetur molestiae. Omnis maxime sit eum mollitia tempora saepe dolor et itaque. Et quidem quis esse maxime."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 2, 10, 10, 40, 30, 339, DateTimeKind.Unspecified).AddTicks(296),
                            CreatedBy = 2L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://kacie.info",
                            LocationType = 2,
                            Name = "eligendi",
                            PasswordProtectionIsUsed = false,
                            Size = 24,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Voluptate maxime libero omnis quis aut architecto."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2021, 3, 6, 13, 9, 16, 420, DateTimeKind.Unspecified).AddTicks(7170),
                            CreatedBy = 3L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://brandy.name",
                            LocationType = 2,
                            Name = "ipsum",
                            PasswordProtectionIsUsed = false,
                            Size = 36,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Cupiditate soluta recusandae est sit dolore qui officia.\nProvident dolore et.\nFacere cupiditate autem voluptatibus sequi ipsam quaerat.\nEst repudiandae et magni ut expedita qui soluta.\nDebitis facilis sint labore fugit non dolorem dolores consequuntur."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2021, 5, 19, 22, 5, 12, 532, DateTimeKind.Unspecified).AddTicks(314),
                            CreatedBy = 4L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://reyes.com",
                            LocationType = 0,
                            Name = "porro",
                            PasswordProtectionIsUsed = false,
                            Size = 26,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "cumque"
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2019, 12, 1, 21, 19, 26, 793, DateTimeKind.Unspecified).AddTicks(2905),
                            CreatedBy = 5L,
                            Frequency = 24,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://hermina.org",
                            LocationType = 1,
                            Name = "maxime",
                            PasswordProtectionIsUsed = false,
                            Size = 24,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Doloribus esse ea quia natus sunt molestiae ea dolores. Repellat nisi et veniam nihil nihil voluptas maiores. Iure in ut aut. Inventore et debitis. Perspiciatis labore non assumenda delectus minus optio saepe. Eveniet doloribus animi neque quia praesentium dignissimos qui."
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 9, 28, 12, 30, 14, 131, DateTimeKind.Unspecified).AddTicks(6401),
                            CreatedBy = 6L,
                            Frequency = 24,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://therese.info",
                            LocationType = 0,
                            Name = "saepe",
                            PasswordProtectionIsUsed = false,
                            Size = 45,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quo architecto et consectetur sit animi vel alias omnis."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 7, 26, 19, 50, 18, 451, DateTimeKind.Unspecified).AddTicks(5528),
                            CreatedBy = 7L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://alison.net",
                            LocationType = 1,
                            Name = "ab",
                            PasswordProtectionIsUsed = false,
                            Size = 46,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "voluptatem"
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2019, 12, 20, 1, 50, 50, 192, DateTimeKind.Unspecified).AddTicks(2560),
                            CreatedBy = 8L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://daryl.org",
                            LocationType = 2,
                            Name = "et",
                            PasswordProtectionIsUsed = false,
                            Size = 42,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "odio"
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 5, 26, 19, 28, 46, 412, DateTimeKind.Unspecified).AddTicks(7240),
                            CreatedBy = 9L,
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://elizabeth.name",
                            LocationType = 0,
                            Name = "cum",
                            PasswordProtectionIsUsed = false,
                            Size = 33,
                            TeamId = 1L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "quo"
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 6, 23, 21, 14, 34, 712, DateTimeKind.Unspecified).AddTicks(7553),
                            CreatedBy = 10L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://shanelle.com",
                            LocationType = 2,
                            Name = "vel",
                            PasswordProtectionIsUsed = false,
                            Size = 32,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "consequatur"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 19, 8, 22, 55, 985, DateTimeKind.Unspecified).AddTicks(590),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 8, 28, 4, 0, 59, 464, DateTimeKind.Unspecified).AddTicks(944),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 2, 26, 6, 47, 35, 740, DateTimeKind.Unspecified).AddTicks(6977),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 2, 14, 7, 0, 532, DateTimeKind.Unspecified).AddTicks(9429),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 2, 24, 16, 47, 1, 94, DateTimeKind.Unspecified).AddTicks(936),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 23, 0, 9, 1, 974, DateTimeKind.Unspecified).AddTicks(2104),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 7, 30, 16, 18, 10, 725, DateTimeKind.Unspecified).AddTicks(2802),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 4, 21, 10, 50, 9, 981, DateTimeKind.Unspecified).AddTicks(4720),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 5, 14, 13, 52, 120, DateTimeKind.Unspecified).AddTicks(2850),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 8, 10, 6, 14, 311, DateTimeKind.Unspecified).AddTicks(1437),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 8L,
                            Email = "Glenn_Price@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 1, 10, 53, 32, 165, DateTimeKind.Unspecified).AddTicks(7187), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Glenn Price"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 5L,
                            Email = "Harry2@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 11, 18, 57, 10, 359, DateTimeKind.Unspecified).AddTicks(2610), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Harry Adams"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 4L,
                            Email = "Mable_Kreiger@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 24, 4, 52, 44, 18, DateTimeKind.Unspecified).AddTicks(1331), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Mable Kreiger"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            Email = "Patty.Kris36@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 11, 0, 33, 48, 514, DateTimeKind.Unspecified).AddTicks(9267), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Patty Kris"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 8L,
                            Email = "Sabrina.Dickinson41@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 12, 9, 35, 2, 978, DateTimeKind.Unspecified).AddTicks(9962), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Sabrina Dickinson"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 4L,
                            Email = "Jeremiah82@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 23, 1, 12, 18, 354, DateTimeKind.Unspecified).AddTicks(1881), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jeremiah Cremin"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 6L,
                            Email = "Lisa4@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 8, 3, 32, 41, 473, DateTimeKind.Unspecified).AddTicks(765), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lisa Bergnaum"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 5L,
                            Email = "Jody_Gorczany53@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 4, 10, 47, 51, 369, DateTimeKind.Unspecified).AddTicks(9923), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jody Gorczany"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            Email = "Rosa.Macejkovic@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 28, 17, 59, 30, 671, DateTimeKind.Unspecified).AddTicks(1485), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rosa Macejkovic"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 4L,
                            Email = "Amanda.OKeefe@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 28, 4, 54, 51, 636, DateTimeKind.Unspecified).AddTicks(3893), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Amanda O'Keefe"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6114), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(5976), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6284), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6270), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6309), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6303), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6330), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6324), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6350), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6344), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6369), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6363), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6388), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6381), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6407), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6401), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6426), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6419), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6444), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 26, 48, 460, DateTimeKind.Unspecified).AddTicks(6438), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2020, 1, 11, 13, 58, 10, 804, DateTimeKind.Unspecified).AddTicks(3872),
                            CreatedBy = 7L,
                            Description = "Quae reprehenderit velit nostrum. Non aspernatur e",
                            Duration = 45,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "amet",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 9, 11, 46, 29, 25, DateTimeKind.Unspecified).AddTicks(1653), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 11, 19, 9, 37, 47, 752, DateTimeKind.Unspecified).AddTicks(5123),
                            CreatedBy = 1L,
                            Description = "Autem sed voluptatem aut laboriosam atque magnam q",
                            Duration = 30,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "amet",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 24, 19, 31, 52, 36, DateTimeKind.Unspecified).AddTicks(7426), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2020, 11, 11, 4, 38, 34, 510, DateTimeKind.Unspecified).AddTicks(1388),
                            CreatedBy = 3L,
                            Description = "Non beatae est sed.",
                            Duration = 38,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "ut",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 15, 10, 19, 18, 19, DateTimeKind.Unspecified).AddTicks(2165), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2019, 8, 9, 10, 52, 44, 890, DateTimeKind.Unspecified).AddTicks(7201),
                            CreatedBy = 3L,
                            Description = "Qui voluptatem atque quod et veniam.",
                            Duration = 48,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "sit",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 4, 1, 22, 37, 771, DateTimeKind.Unspecified).AddTicks(804), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2020, 3, 20, 22, 0, 34, 985, DateTimeKind.Unspecified).AddTicks(9640),
                            CreatedBy = 1L,
                            Description = "Quo incidunt natus rerum omnis vitae.",
                            Duration = 54,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "exercitationem",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 8, 12, 36, 50, 967, DateTimeKind.Unspecified).AddTicks(6281), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2019, 10, 24, 6, 11, 7, 626, DateTimeKind.Unspecified).AddTicks(9626),
                            CreatedBy = 9L,
                            Description = "Et dolorum aut doloremque quo.",
                            Duration = 11,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "sit",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 12, 6, 25, 12, 712, DateTimeKind.Unspecified).AddTicks(8740), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 4, 12, 19, 29, 0, 589, DateTimeKind.Unspecified).AddTicks(7914),
                            CreatedBy = 1L,
                            Description = "Et nemo quam nulla suscipit delectus consequatur e",
                            Duration = 47,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "amet",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 13, 13, 47, 30, 146, DateTimeKind.Unspecified).AddTicks(3614), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2020, 9, 11, 3, 20, 50, 405, DateTimeKind.Unspecified).AddTicks(1470),
                            CreatedBy = 4L,
                            Description = "Et sed sit aliquid ut doloribus atque quo optio.\nD",
                            Duration = 30,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "labore",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 26, 23, 26, 7, 197, DateTimeKind.Unspecified).AddTicks(5736), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2021, 6, 1, 9, 51, 23, 904, DateTimeKind.Unspecified).AddTicks(2685),
                            CreatedBy = 5L,
                            Description = "maxime",
                            Duration = 60,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "laudantium",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 22, 8, 35, 59, 647, DateTimeKind.Unspecified).AddTicks(6354), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 5, 24, 6, 18, 15, 139, DateTimeKind.Unspecified).AddTicks(7706),
                            CreatedBy = 2L,
                            Description = "Eum minima possimus et voluptatibus est aspernatur",
                            Duration = 24,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "sed",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 19, 18, 15, 47, 943, DateTimeKind.Unspecified).AddTicks(1185), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "Voluptas et cumque nihil sunt dolor voluptatem suscipit incidunt tenetur."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "Dolor est mollitia rerum.\nOmnis neque incidunt omnis facere non.\nEst ut deserunt hic fugit voluptatem eum voluptas ut et."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Non officia molestiae.\nAlias consectetur voluptate sit ex veniam consequuntur eos occaecati.\nEst dolor quia."
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Quo aut similique recusandae aut. Ut ab laborum laborum aspernatur. Aut explicabo quas totam qui voluptas quo quia quaerat. Dignissimos et nostrum et quidem nemo blanditiis. Hic et repellat laboriosam voluptatibus consequuntur et voluptatem. Enim explicabo voluptatem qui sapiente sed unde similique"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Et omnis qui quia culpa cumque veritatis occaecati.\nAperiam non nihil tempore voluptatum.\nEst nostrum est.\nQuos aut deserunt iusto omnis repellat asperiores et iste placeat.\nIllo ut dolore aut ut.\nNobis et sunt sequi rerum."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Dolorem sapiente est aperiam soluta voluptas rerum."
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Magni et reiciendis. Quidem tempore ex dolor ex nulla est corporis distinctio laborum. Natus sit voluptatibus saepe fugit id ipsum."
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Incidunt voluptatem autem.\nQuia provident natus repudiandae nobis accusantium impedit.\nAliquid blanditiis labore in magni non quaerat id qui aut.\nIllum aliquam omnis."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "quibusdamAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Est in quae.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Autem voluptas nobis doloribus quia aperiam est inventore saepe.\nDignissimos quibusdam assumenda itaque consequuntur veritatis.\nAspernatur animi numquam et qui pariatur.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Crist LLC",
                            PageLink = "https://jamaal.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Enim maiores sunt fugiat voluptatibus totam est quo ipsum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Rohan, Hackett and Corkery",
                            PageLink = "http://dorothea.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Ipsa eos non.\nSit reprehenderit dolorum iusto rerum occaecati quia dignissimos.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Schowalter LLC",
                            PageLink = "http://eunice.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Nulla necessitatibus sit cumque eius saepe nihil laborum eveniet non.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Funk Group",
                            PageLink = "http://rosemarie.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "voluptates",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Weber Group",
                            PageLink = "http://kieran.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Ducimus officia ut qui necessitatibus. Labore nulla eius inventore a ut veritatis est. Quia nostrum a dicta dignissimos pariatur autem accusantium maiores molestiae. Minima vel minima distinctio. Iste omnis repudiandae officiis enim non omnis occaecati non.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Halvorson, Dooley and VonRueden",
                            PageLink = "http://ignatius.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Quas harum praesentium autem dolorem quia magnam dolorem optio nihil.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Lubowitz, Schaden and Volkman",
                            PageLink = "https://pierre.name",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Quia veritatis at natus assumenda.\nRatione ipsam fugit.\nSimilique asperiores asperiores.\nMollitia minima amet tempore quia repellat neque.\nVelit nulla numquam magni eum fuga dolores et.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Treutel, Dietrich and Pacocha",
                            PageLink = "http://dillon.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Sed sed omnis dolor voluptatem libero sunt nobis.\nId culpa et cupiditate voluptatem.\nNesciunt voluptates odit quas quos at quibusdam odit omnis nostrum.\nIpsa quas eos enim omnis modi porro.\nQuod quod autem laborum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Reichert and Sons",
                            PageLink = "http://katarina.name",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Autem voluptates autem optio nostrum optio.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Klocko, Cassin and Nolan",
                            PageLink = "https://jovani.net",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 6
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasFilter("[Uid] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Morris_Mosciski@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1013.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Morris Mosciski",
                            PhoneNumber = "520.634.86",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Shane8@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/287.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Shane Shanahan",
                            PhoneNumber = "1-885-775-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Warren_Steuber@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/714.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Warren Steuber",
                            PhoneNumber = "1-953-932-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Rochelle_Mohr@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/70.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Rochelle Mohr",
                            PhoneNumber = "478-306-14",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Deborah.Yundt@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/525.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Deborah Yundt",
                            PhoneNumber = "462-638-47",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Gregory89@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/190.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Gregory Herman",
                            PhoneNumber = "920-521-27",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Alton_Weissnat@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/856.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Alton Weissnat",
                            PhoneNumber = "270-395-99",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Marilyn76@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/949.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Marilyn Cremin",
                            PhoneNumber = "1-250-886-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Toby69@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/252.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Toby Stark",
                            PhoneNumber = "1-417-464-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Jessie72@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1056.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jessie Graham",
                            PhoneNumber = "(830) 378-",
                            TimeFormat = 1,
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
