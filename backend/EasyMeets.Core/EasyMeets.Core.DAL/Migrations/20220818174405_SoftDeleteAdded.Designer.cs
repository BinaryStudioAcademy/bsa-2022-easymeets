// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    [Migration("20220818174405_SoftDeleteAdded")]
    partial class SoftDeleteAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 1,
                            AvailabilitySlotId = 1L,
                            Color = 4,
                            Days = 7,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            AvailabilitySlotId = 2L,
                            Color = 6,
                            Days = 28,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 3,
                            AvailabilitySlotId = 3L,
                            Color = 4,
                            Days = 18,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 2,
                            AvailabilitySlotId = 4L,
                            Color = 2,
                            Days = 3,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 3,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 1,
                            AvailabilitySlotId = 5L,
                            Color = 5,
                            Days = 23,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 3,
                            AvailabilitySlotId = 6L,
                            Color = 1,
                            Days = 10,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 1,
                            AvailabilitySlotId = 7L,
                            Color = 3,
                            Days = 15,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 3,
                            AvailabilitySlotId = 8L,
                            Color = 8,
                            Days = 14,
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 3,
                            AvailabilitySlotId = 9L,
                            Color = 2,
                            Days = 14,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 1,
                            AvailabilitySlotId = 10L,
                            Color = 2,
                            Days = 6,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PasswordProtectionIsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 1, 3, 15, 58, 47, 553, DateTimeKind.Unspecified).AddTicks(9611),
                            CreatedBy = 1L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://gwendolyn.net",
                            LocationType = 2,
                            Name = "distinctio",
                            PasswordProtectionIsUsed = false,
                            Size = 17,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "reprehenderit"
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 6, 17, 10, 40, 22, 974, DateTimeKind.Unspecified).AddTicks(4345),
                            CreatedBy = 2L,
                            Frequency = 17,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://delphine.name",
                            LocationType = 0,
                            Name = "aperiam",
                            PasswordProtectionIsUsed = false,
                            Size = 48,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Consequuntur nemo suscipit tempora nobis quam.\nOfficiis et debitis nisi nesciunt velit qui enim veniam.\nBeatae adipisci nesciunt a aperiam.\nVoluptas et sunt ab unde doloremque harum.\nVelit eos molestias quo."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 4, 21, 14, 17, 36, 438, DateTimeKind.Unspecified).AddTicks(9593),
                            CreatedBy = 3L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://jade.org",
                            LocationType = 2,
                            Name = "numquam",
                            PasswordProtectionIsUsed = false,
                            Size = 55,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Rem quia temporibus.\nLaudantium facere voluptatibus aliquid voluptatem unde sit eum."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 5, 9, 15, 36, 46, 41, DateTimeKind.Unspecified).AddTicks(524),
                            CreatedBy = 4L,
                            Frequency = 30,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://lon.info",
                            LocationType = 2,
                            Name = "dolorem",
                            PasswordProtectionIsUsed = false,
                            Size = 23,
                            TeamId = 2L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "dolor"
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2021, 4, 19, 12, 52, 8, 162, DateTimeKind.Unspecified).AddTicks(4453),
                            CreatedBy = 5L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://reba.biz",
                            LocationType = 0,
                            Name = "voluptas",
                            PasswordProtectionIsUsed = false,
                            Size = 42,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quam temporibus sit suscipit atque amet porro autem. Ipsum laborum sequi quo voluptas. Quia commodi voluptatem nobis a et. Natus quis incidunt vel reiciendis earum quia."
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 2, 13, 2, 12, 50, 107, DateTimeKind.Unspecified).AddTicks(4886),
                            CreatedBy = 6L,
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://weston.name",
                            LocationType = 0,
                            Name = "sit",
                            PasswordProtectionIsUsed = false,
                            Size = 52,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "dicta"
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2020, 1, 25, 20, 5, 42, 625, DateTimeKind.Unspecified).AddTicks(5328),
                            CreatedBy = 7L,
                            Frequency = 25,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://elwyn.org",
                            LocationType = 2,
                            Name = "est",
                            PasswordProtectionIsUsed = false,
                            Size = 38,
                            TeamId = 3L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Qui consectetur nemo doloremque molestias deleniti dolores cupiditate modi.\nAut magni nesciunt ut sed hic odit.\nEaque doloribus aut facilis fugiat dolorem sunt dignissimos autem excepturi."
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2019, 7, 22, 18, 23, 57, 148, DateTimeKind.Unspecified).AddTicks(8824),
                            CreatedBy = 8L,
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://foster.org",
                            LocationType = 2,
                            Name = "eaque",
                            PasswordProtectionIsUsed = false,
                            Size = 45,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Recusandae voluptatem ab architecto sit sed voluptatum molestiae."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2019, 9, 29, 10, 13, 27, 977, DateTimeKind.Unspecified).AddTicks(5524),
                            CreatedBy = 9L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://marietta.info",
                            LocationType = 1,
                            Name = "id",
                            PasswordProtectionIsUsed = false,
                            Size = 35,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Quo deserunt tenetur. Libero dignissimos consequuntur sapiente non a. Vel et quo et consequatur aut quaerat."
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 1, 21, 7, 7, 52, 140, DateTimeKind.Unspecified).AddTicks(8056),
                            CreatedBy = 10L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://marjory.net",
                            LocationType = 2,
                            Name = "quia",
                            PasswordProtectionIsUsed = false,
                            Size = 26,
                            TeamId = 8L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Magni voluptate debitis."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 5, 7, 8, 46, 58, 76, DateTimeKind.Unspecified).AddTicks(3304),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 11, 9, 20, 53, 47, 844, DateTimeKind.Unspecified).AddTicks(3369),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 17, 16, 23, 33, 981, DateTimeKind.Unspecified).AddTicks(4321),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 22, 9, 54, 41, 292, DateTimeKind.Unspecified).AddTicks(2346),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 8, 3, 1, 13, 48, 433, DateTimeKind.Unspecified).AddTicks(5757),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 27, 12, 6, 19, 218, DateTimeKind.Unspecified).AddTicks(1539),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 22, 12, 12, 55, 686, DateTimeKind.Unspecified).AddTicks(2571),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 7, 11, 10, 30, 39, 969, DateTimeKind.Unspecified).AddTicks(4676),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 11, 30, 6, 51, 22, 221, DateTimeKind.Unspecified).AddTicks(2979),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 11, 25, 20, 26, 2, 117, DateTimeKind.Unspecified).AddTicks(6984),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 2L,
                            Email = "Marcus59@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 8, 14, 6, 28, 173, DateTimeKind.Unspecified).AddTicks(1521), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Marcus Howell"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 4L,
                            Email = "Emily82@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 26, 1, 24, 39, 30, DateTimeKind.Unspecified).AddTicks(8854), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Emily Jacobson"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 5L,
                            Email = "Brandon55@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 31, 3, 16, 42, 492, DateTimeKind.Unspecified).AddTicks(6612), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Brandon Kautzer"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 1L,
                            Email = "Melissa.Moore35@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 12, 15, 15, 19, 791, DateTimeKind.Unspecified).AddTicks(7766), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Melissa Moore"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 7L,
                            Email = "Steve_Douglas@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 16, 21, 6, 44, 573, DateTimeKind.Unspecified).AddTicks(1476), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Steve Douglas"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 10L,
                            Email = "Bradford.Mayert19@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 2, 13, 33, 42, 451, DateTimeKind.Unspecified).AddTicks(941), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Bradford Mayert"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 9L,
                            Email = "Jacob.Torp5@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 17, 2, 6, 24, 492, DateTimeKind.Unspecified).AddTicks(8815), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jacob Torp"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 1L,
                            Email = "Natasha.Volkman95@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 15, 18, 44, 2, 156, DateTimeKind.Unspecified).AddTicks(2756), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Natasha Volkman"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 2L,
                            Email = "Erick_Johnson86@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 15, 8, 55, 50, 71, DateTimeKind.Unspecified).AddTicks(6219), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Erick Johnson"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 7L,
                            Email = "Christopher.Cartwright@gmail.",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 11, 7, 56, 22, 130, DateTimeKind.Unspecified).AddTicks(2922), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Christopher Cartwright"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(4872), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(4663), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5172), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5155), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5197), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5190), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5219), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5212), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5241), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5234), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5261), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5254), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5282), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5275), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5301), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5295), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5321), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5314), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 20, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5341), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 19, 20, 44, 4, 255, DateTimeKind.Unspecified).AddTicks(5335), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2019, 11, 10, 19, 51, 2, 604, DateTimeKind.Unspecified).AddTicks(6005),
                            CreatedBy = 9L,
                            Description = "Repellendus earum qui est rem.\nPossimus beatae hic",
                            Duration = 59,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "non",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 6, 16, 12, 50, 647, DateTimeKind.Unspecified).AddTicks(3742), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2020, 12, 8, 14, 39, 33, 133, DateTimeKind.Unspecified).AddTicks(9685),
                            CreatedBy = 5L,
                            Description = "Magnam sit voluptas blanditiis sint est rerum susc",
                            Duration = 24,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "dolor",
                            StartTime = new DateTimeOffset(new DateTime(2023, 5, 24, 23, 19, 40, 93, DateTimeKind.Unspecified).AddTicks(5436), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2020, 4, 13, 22, 34, 28, 163, DateTimeKind.Unspecified).AddTicks(1753),
                            CreatedBy = 4L,
                            Description = "Quia blanditiis accusantium. Possimus doloribus di",
                            Duration = 54,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "in",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 9, 7, 31, 27, 733, DateTimeKind.Unspecified).AddTicks(3179), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2020, 4, 11, 6, 58, 27, 529, DateTimeKind.Unspecified).AddTicks(7662),
                            CreatedBy = 1L,
                            Description = "qui",
                            Duration = 28,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "rerum",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 17, 2, 39, 13, 645, DateTimeKind.Unspecified).AddTicks(3791), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2021, 2, 14, 9, 31, 53, 263, DateTimeKind.Unspecified).AddTicks(185),
                            CreatedBy = 2L,
                            Description = "consequuntur",
                            Duration = 47,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "assumenda",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 11, 3, 20, 59, 243, DateTimeKind.Unspecified).AddTicks(2635), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 3, 15, 22, 20, 45, 708, DateTimeKind.Unspecified).AddTicks(1170),
                            CreatedBy = 4L,
                            Description = "qui",
                            Duration = 35,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "eligendi",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 24, 9, 56, 34, 454, DateTimeKind.Unspecified).AddTicks(1802), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2019, 11, 13, 18, 39, 29, 161, DateTimeKind.Unspecified).AddTicks(8031),
                            CreatedBy = 6L,
                            Description = "Nihil est est et dolor et.",
                            Duration = 19,
                            IsDeleted = false,
                            LocationType = 0,
                            Name = "omnis",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 3, 17, 33, 8, 409, DateTimeKind.Unspecified).AddTicks(2888), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 7, 13, 7, 15, 15, 234, DateTimeKind.Unspecified).AddTicks(2690),
                            CreatedBy = 4L,
                            Description = "Officiis aliquam nulla fugiat facere laudantium mi",
                            Duration = 24,
                            IsDeleted = false,
                            LocationType = 2,
                            Name = "corporis",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 3, 6, 2, 27, 575, DateTimeKind.Unspecified).AddTicks(9517), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2020, 11, 8, 12, 56, 49, 256, DateTimeKind.Unspecified).AddTicks(9278),
                            CreatedBy = 10L,
                            Description = "Id eum sunt totam porro voluptatem voluptatem quae",
                            Duration = 14,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "perferendis",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 1, 22, 16, 26, 817, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 8, 3, 1, 57, 25, 588, DateTimeKind.Unspecified).AddTicks(1777),
                            CreatedBy = 9L,
                            Description = "Unde eaque itaque quos quaerat iure dignissimos et",
                            Duration = 27,
                            IsDeleted = false,
                            LocationType = 1,
                            Name = "officia",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 16, 19, 36, 14, 581, DateTimeKind.Unspecified).AddTicks(5074), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Enim cumque omnis corporis velit.\nEt ea aut quia laudantium quia quod.\nTenetur in praesentium dolorum illo ut quis et.\nOfficiis velit nostrum voluptatum vitae ipsum nam.\nQui tempore est officia incidunt.\nRerum omnis fuga molestiae quod repellat aliquid cum eum."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Ad cumque iure. Deleniti eligendi sit sed. Aperiam quibusdam aperiam. Quis rem autem dolores. In nobis ex ipsa esse eius qui. Tempora laudantium perspiciatis tempora et."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Repellat vel dolor modi aliquam qui in atque nesciunt voluptatem.\nBlanditiis harum aperiam.\nVoluptas occaecati quasi."
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Modi aliquid ut magni magnam debitis iusto labore et. Id aut culpa voluptas nesciunt esse optio eligendi. Suscipit sed ipsum omnis eum. Distinctio ducimus porro illo. Autem eligendi doloremque facere explicabo atque consequuntur. Debitis eveniet iusto perspiciatis vel rerum harum quisquam modi aut."
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "A nesciunt similique quia minima.AAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Sapiente quae et tempore non doloribus pariatur cupiditate animi impedit."
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Maiores consequatur quos nam aspernatur. Et sit minus repudiandae repellat sint eum. Vel ea expedita sed veritatis dicta vitae voluptas quo."
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Dolores nam culpa aut voluptatem dicta sed cupiditate vitae.\nEa consequatur consequatur illum quisquam impedit."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            Text = "Qui facilis est unde rerum.\nEt recusandae ea.\nFugiat iusto ea tempore ea expedita.\nIn similique ratione ea voluptatem est eum officiis.\nIusto labore ad quos sint et amet aliquam."
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Porro recusandae aliquam sed cum adipisci sit atque iste."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "labore",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Cummerata, Grady and Mills",
                            PageLink = "https://mikayla.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "assumenda",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Wintheiser - Ryan",
                            PageLink = "https://berniece.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Adipisci aliquam natus aut laborum reprehenderit.\nFuga neque magni sequi dolor aperiam sit animi distinctio porro.\nFacere ipsa velit pariatur expedita a occaecati architecto perferendis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Rogahn Inc",
                            PageLink = "https://kale.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Praesentium exercitationem ratione.\nPraesentium velit aut.\nQuo est voluptatem cupiditate eligendi cupiditate aspernatur molestiae.\nOmnis quisquam dolores.\nEx sed eaque.\nEum temporibus hic omnis dicta sit illum ea.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Bartell, Koelpin and Grant",
                            PageLink = "http://rhea.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Necessitatibus eligendi nemo recusandae est. Ut vel nostrum aut sit autem accusantium sequi. Repudiandae id ut nam. Laborum similique quis molestiae facilis. Voluptatibus ipsum occaecati quisquam accusantium ipsum vero placeat.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Walsh - Herzog",
                            PageLink = "http://trystan.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Voluptas nostrum occaecati consequatur sit illo laborum distinctio.\nExplicabo sit doloribus at dolor commodi autem.\nError labore reiciendis eos.\nRatione quod et perferendis tempora accusantium alias ut provident.\nUt enim voluptatibus autem commodi id impedit.\nDolorum ea inventore ut excepturi ex do",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Schamberger - Volkman",
                            PageLink = "http://mose.biz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Aut error sit.\nIn consequatur est velit debitis ullam laborum ut sit.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Herman - Borer",
                            PageLink = "http://elvera.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Laudantium iste et error repellendus et. Iure est mollitia magnam. Est qui qui. Ad asperiores eius dolor exercitationem facere voluptatibus omnis quis. Nulla laboriosam architecto provident quam eaque perferendis.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Mertz, Erdman and Williamson",
                            PageLink = "http://yasmin.name",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Incidunt qui aspernatur.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Wunsch - Gottlieb",
                            PageLink = "https://aimee.net",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Eum et ipsam soluta voluptate maiores. Dolores rerum quia eum quae. Et et qui quia et sapiente ut architecto quos. Enim voluptatem dicta aliquam ut.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gorczany, Schmidt and Durgan",
                            PageLink = "http://ardella.net",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 10
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 2
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 10
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Krista.Schoen41@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1198.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Krista Schoen",
                            PhoneNumber = "1-529-765-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Antonio_Beatty@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/75.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Antonio Beatty",
                            PhoneNumber = "854.973.38",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Dana74@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/838.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Dana King",
                            PhoneNumber = "887.620.75",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Mable_Rutherford@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/778.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Mable Rutherford",
                            PhoneNumber = "608-293-16",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Nick.Yost@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1024.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Nick Yost",
                            PhoneNumber = "1-953-915-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Enrique.Glover43@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/211.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Enrique Glover",
                            PhoneNumber = "702.811.43",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Susan93@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/995.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Susan Waters",
                            PhoneNumber = "1-981-429-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Belinda_Larson65@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/254.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Belinda Larson",
                            PhoneNumber = "475.868.38",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Lance78@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1186.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Lance Hane",
                            PhoneNumber = "477.929.53",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Geneva.Renner@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1003.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Geneva Renner",
                            PhoneNumber = "981.419.05",
                            TimeFormat = 1,
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
