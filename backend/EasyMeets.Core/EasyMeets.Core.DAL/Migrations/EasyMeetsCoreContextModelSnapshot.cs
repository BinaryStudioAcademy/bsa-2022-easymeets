// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    partial class EasyMeetsCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long?>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 1,
                            AvailabilitySlotId = 1L,
                            Color = 4,
                            Days = 4,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 1,
                            AvailabilitySlotId = 2L,
                            Color = 3,
                            Days = 12,
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 2,
                            AvailabilitySlotId = 3L,
                            Color = 6,
                            Days = 4,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 3,
                            AvailabilitySlotId = 4L,
                            Color = 8,
                            Days = 3,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 1,
                            AvailabilitySlotId = 5L,
                            Color = 5,
                            Days = 10,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 2,
                            AvailabilitySlotId = 6L,
                            Color = 1,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 3,
                            AvailabilitySlotId = 7L,
                            Color = 6,
                            Days = 15,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 1,
                            AvailabilitySlotId = 8L,
                            Color = 5,
                            Days = 2,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 4,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 1,
                            AvailabilitySlotId = 9L,
                            Color = 7,
                            Days = 10,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 6,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 3,
                            AvailabilitySlotId = 10L,
                            Color = 5,
                            Days = 4,
                            IsDeleted = false,
                            MaxNumberOfBookings = 5,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PasswordProtectionIsUsed")
                        .HasColumnType("bit");

                    b.Property<long>("SheduleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 4, 12, 0, 48, 41, 913, DateTimeKind.Unspecified).AddTicks(5030),
                            CreatedBy = 1L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://shanny.net",
                            LocationType = 0,
                            Name = "doloremque",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 46,
                            TeamId = 3L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Corrupti adipisci reprehenderit unde consequatur explicabo aliquid deserunt aut."
                        },
                        new
                        {
                            Id = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 7, 20, 4, 15, 16, 989, DateTimeKind.Unspecified).AddTicks(9505),
                            CreatedBy = 2L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://lempi.org",
                            LocationType = 2,
                            Name = "explicabo",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 53,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Consequatur optio iste."
                        },
                        new
                        {
                            Id = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2020, 2, 29, 3, 39, 18, 61, DateTimeKind.Unspecified).AddTicks(441),
                            CreatedBy = 3L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://holden.com",
                            LocationType = 1,
                            Name = "quia",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 38,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Aliquid beatae cumque.\nVoluptatem quia qui qui velit quibusdam placeat."
                        },
                        new
                        {
                            Id = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 5, 28, 6, 12, 57, 71, DateTimeKind.Unspecified).AddTicks(7964),
                            CreatedBy = 4L,
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://nayeli.com",
                            LocationType = 1,
                            Name = "quos",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 39,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Ut est nesciunt non numquam accusantium."
                        },
                        new
                        {
                            Id = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2021, 1, 21, 18, 4, 26, 614, DateTimeKind.Unspecified).AddTicks(4361),
                            CreatedBy = 5L,
                            Frequency = 18,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://floy.net",
                            LocationType = 1,
                            Name = "odit",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 41,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "voluptate"
                        },
                        new
                        {
                            Id = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2021, 3, 8, 5, 15, 30, 784, DateTimeKind.Unspecified).AddTicks(1106),
                            CreatedBy = 6L,
                            Frequency = 27,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://tyreek.org",
                            LocationType = 0,
                            Name = "quasi",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 33,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Eius labore esse neque labore dolor quia saepe.\nInventore aut fuga.\nDebitis quo velit voluptatem rerum.\nVitae voluptatem quia iste itaque officia.\nExercitationem dolor repudiandae nihil alias asperiores nam quis voluptate sit.\nNon accusamus qui ut modi ea et."
                        },
                        new
                        {
                            Id = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 6, 11, 1, 41, 54, 366, DateTimeKind.Unspecified).AddTicks(7577),
                            CreatedBy = 7L,
                            Frequency = 30,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://kieran.biz",
                            LocationType = 2,
                            Name = "quia",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 33,
                            TeamId = 3L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "nobis"
                        },
                        new
                        {
                            Id = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2019, 8, 3, 16, 40, 44, 206, DateTimeKind.Unspecified).AddTicks(691),
                            CreatedBy = 8L,
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://ara.name",
                            LocationType = 2,
                            Name = "necessitatibus",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 26,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Et odit sit mollitia nulla aspernatur voluptas."
                        },
                        new
                        {
                            Id = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2021, 6, 6, 7, 15, 43, 941, DateTimeKind.Unspecified).AddTicks(5293),
                            CreatedBy = 9L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://avis.name",
                            LocationType = 2,
                            Name = "aut",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 58,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "enim"
                        },
                        new
                        {
                            Id = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 11, 21, 16, 22, 26, 916, DateTimeKind.Unspecified).AddTicks(2247),
                            CreatedBy = 10L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://casey.name",
                            LocationType = 0,
                            Name = "voluptatibus",
                            PasswordProtectionIsUsed = false,
                            SheduleId = 0L,
                            Size = 43,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "sunt"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("AddEventsFromTeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectedCalendar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessToken = "Corrupti adipisci reprehenderit unde consequatur explicabo aliquid deserunt aut.AAAAAAAAAAAAAAAAAAAA",
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Troy.Kuvalis49@hotmail.com",
                            CreatedAt = new DateTime(2020, 8, 6, 9, 54, 16, 144, DateTimeKind.Unspecified).AddTicks(7369),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            RefreshToken = "Harum soluta vitae atque dolores tempore debitis explicabo.\nBeatae consequatur optio iste qui.\nRepudiandae odit quo aut quisquam et quam.\nQuia id veritatis ab aliquid beatae cumque quas.\nQuia qui qui.\nQuibusdam placeat magni et.",
                            Uid = "Voluptatem rerum esse vitae. Quia iste itaque offi",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            AccessToken = "Ullam illo vel sapiente necessitatibus totam molestias et odit sit.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Rosa3@gmail.com",
                            CreatedAt = new DateTime(2020, 4, 28, 16, 59, 30, 530, DateTimeKind.Unspecified).AddTicks(4371),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            RefreshToken = "Voluptas et architecto.\nAccusantium aliquam quis quia reiciendis qui est aut.\nEnim est aspernatur.\nDolorum recusandae voluptas dolore inventore mollitia ab voluptatibus.\nSunt ut neque.\nNeque fuga recusandae modi voluptas omnis in.",
                            Uid = "Magni perferendis quia asperiores fugiat omnis ali",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 3L,
                            AccessToken = "Iste soluta sed similique maxime soluta nihil.\nNatus vel mollitia.\nIpsam debitis repellat repudiandae delectus dolor voluptatem.",
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Lisa76@gmail.com",
                            CreatedAt = new DateTime(2019, 8, 29, 4, 21, 5, 517, DateTimeKind.Unspecified).AddTicks(4105),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            RefreshToken = "Accusantium eum cupiditate qui dolores sunt. Ut nihil et tenetur earum. Cum voluptatem non ipsa aut esse et. Molestiae qui quis architecto aut et quo rerum. Vel voluptatum excepturi veritatis expedita id. Et unde dolores.",
                            Uid = "vitae",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 4L,
                            AccessToken = "perferendisAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Kimberly.Paucek48@hotmail.com",
                            CreatedAt = new DateTime(2020, 12, 3, 14, 44, 12, 22, DateTimeKind.Unspecified).AddTicks(8290),
                            CreatedBy = 4L,
                            IsDeleted = false,
                            RefreshToken = "Provident consectetur veniam quia.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            Uid = "Molestiae omnis exercitationem soluta et labore co",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            AccessToken = "Nisi dolorem tempora tempore repellat distinctio. Nostrum est reiciendis magni quia. Magni laboriosam doloribus ut est. Et aut qui sed repellat tenetur occaecati tempora ea perferendis. Amet distinctio iste.",
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Irvin.Weimann57@yahoo.com",
                            CreatedAt = new DateTime(2020, 10, 24, 11, 24, 44, 777, DateTimeKind.Unspecified).AddTicks(7364),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            RefreshToken = "Id id voluptatem vero voluptas natus nesciunt.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            Uid = "Quia sed ipsum officiis qui qui molestias sint. Ea",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 6L,
                            AccessToken = "Voluptate accusamus asperiores dignissimos.\nSit quo quos.\nOfficia provident dolore eius consequatur harum ratione.",
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Harriet_Morar@hotmail.com",
                            CreatedAt = new DateTime(2020, 7, 23, 11, 43, 18, 574, DateTimeKind.Unspecified).AddTicks(8741),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            RefreshToken = "Commodi iure voluptatum et quia molestiae quis ut natus voluptatem. Pariatur facere et nihil id. Saepe sit et. Tempore a nulla et eveniet enim exercitationem. Id nihil consequatur molestiae et delectus autem recusandae et. Sint quisquam veritatis sequi te",
                            Uid = "enim",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 7L,
                            AccessToken = "Alias voluptatem et et quidem animi voluptatum delectus adipisci.\nDolorem illo laudantium culpa sit.\nPraesentium aperiam praesentium ut quos.\nNam ad in.\nQui incidunt ut fuga porro.\nNon vel quisquam ut.",
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Pete.Reynolds@gmail.com",
                            CreatedAt = new DateTime(2021, 5, 28, 11, 43, 49, 681, DateTimeKind.Unspecified).AddTicks(9273),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            RefreshToken = "Et qui non eum aut aliquid sed.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            Uid = "Vel aspernatur deleniti voluptate nobis possimus v",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 8L,
                            AccessToken = "Autem porro eius dolor doloremque qui eveniet nulla.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Shelia19@hotmail.com",
                            CreatedAt = new DateTime(2021, 6, 28, 18, 19, 1, 189, DateTimeKind.Unspecified).AddTicks(1738),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            RefreshToken = "Impedit est et sequi accusantium est nam aut.\nSit nulla sed dolor iste.AAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            Uid = "Beatae magnam velit architecto. Est quos officiis",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 9L,
                            AccessToken = "Molestias magni corrupti autem cumque culpa inventore omnis. Mollitia sed incidunt praesentium ullam. Commodi ad dignissimos id deserunt aut assumenda.",
                            AddEventsFromTeamId = 7L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Ada.Towne@yahoo.com",
                            CreatedAt = new DateTime(2021, 5, 18, 18, 49, 24, 553, DateTimeKind.Unspecified).AddTicks(4548),
                            CreatedBy = 10L,
                            IsDeleted = false,
                            RefreshToken = "Quos officia quaerat omnis.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            Uid = "Quo voluptatem eveniet sunt tempora et ut dolor.\nA",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 10L,
                            AccessToken = "Qui et sed sint ea voluptatibus.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            ConnectedCalendar = "Patsy12@gmail.com",
                            CreatedAt = new DateTime(2021, 6, 22, 21, 6, 32, 752, DateTimeKind.Unspecified).AddTicks(6828),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            RefreshToken = "Nulla voluptas est.\nRepudiandae ea a debitis et autem.\nQuia id quod perferendis sunt consectetur expedita autem at sit.\nHic dolores nihil.\nProvident sit dignissimos ipsa nesciunt non.",
                            Uid = "hic",
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("MeetingId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 3L,
                            Email = "Donald_Hills@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 30, 9, 55, 21, 631, DateTimeKind.Unspecified).AddTicks(8935), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Donald Hills",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 7L,
                            Email = "Leonard62@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 24, 8, 4, 16, 667, DateTimeKind.Unspecified).AddTicks(966), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Leonard Effertz",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 6L,
                            Email = "Dewey_Schuppe@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 9, 16, 10, 33, 27, 485, DateTimeKind.Unspecified).AddTicks(8284), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Dewey Schuppe",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 6L,
                            Email = "Elijah.Blanda@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 9, 16, 28, 23, 436, DateTimeKind.Unspecified).AddTicks(4319), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Elijah Blanda",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            Email = "Joel_Goldner@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 3, 1, 10, 0, 38, 117, DateTimeKind.Unspecified).AddTicks(7031), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Joel Goldner",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 4L,
                            Email = "Jaime.Veum2@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 12, 27, 2, 18, 10, 761, DateTimeKind.Unspecified).AddTicks(7036), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Jaime Veum",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 9L,
                            Email = "Patti.Feil@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 13, 8, 2, 24, 179, DateTimeKind.Unspecified).AddTicks(421), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Patti Feil",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 2L,
                            Email = "Jesus9@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 13, 3, 56, 7, 306, DateTimeKind.Unspecified).AddTicks(4588), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Jesus Gorczany",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 1L,
                            Email = "Jacob.Ondricka6@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 3, 22, 39, 15, 966, DateTimeKind.Unspecified).AddTicks(8428), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Jacob Ondricka",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 1L,
                            Email = "Erma.MacGyver86@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 13, 8, 32, 51, 923, DateTimeKind.Unspecified).AddTicks(5533), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MeetingId = 0L,
                            Name = "Erma MacGyver",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4360), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4276), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4528), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4522), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4543), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4540), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4554), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4552), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4565), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4562), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4574), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4572), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4584), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4581), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4654), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4651), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4665), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4663), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 27, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4675), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 26, 14, 54, 21, 851, DateTimeKind.Unspecified).AddTicks(4672), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique()
                        .HasFilter("[AvailabilitySlotId] IS NOT NULL");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            CreatedAt = new DateTime(2021, 2, 28, 9, 59, 54, 64, DateTimeKind.Unspecified).AddTicks(3687),
                            CreatedBy = 4L,
                            Duration = 52,
                            IsDeleted = false,
                            LocationType = 0,
                            MeetingLink = "http://karson.net",
                            Name = "ut",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 19, 4, 42, 13, 924, DateTimeKind.Unspecified).AddTicks(2271), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            CreatedAt = new DateTime(2020, 2, 15, 17, 20, 37, 304, DateTimeKind.Unspecified).AddTicks(5765),
                            CreatedBy = 2L,
                            Duration = 46,
                            IsDeleted = false,
                            LocationType = 1,
                            MeetingLink = "https://mariela.com",
                            Name = "explicabo",
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 13, 14, 27, 2, 457, DateTimeKind.Unspecified).AddTicks(6589), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            CreatedAt = new DateTime(2021, 5, 24, 10, 18, 7, 49, DateTimeKind.Unspecified).AddTicks(3480),
                            CreatedBy = 9L,
                            Duration = 14,
                            IsDeleted = false,
                            LocationType = 2,
                            MeetingLink = "http://maximilian.name",
                            Name = "atque",
                            StartTime = new DateTimeOffset(new DateTime(2022, 12, 23, 8, 23, 46, 853, DateTimeKind.Unspecified).AddTicks(8502), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            CreatedAt = new DateTime(2020, 2, 7, 23, 19, 36, 468, DateTimeKind.Unspecified).AddTicks(7065),
                            CreatedBy = 2L,
                            Duration = 52,
                            IsDeleted = false,
                            LocationType = 2,
                            MeetingLink = "http://heath.name",
                            Name = "qui",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 1, 12, 55, 48, 378, DateTimeKind.Unspecified).AddTicks(9343), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 7L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            CreatedAt = new DateTime(2020, 2, 22, 16, 14, 10, 519, DateTimeKind.Unspecified).AddTicks(2388),
                            CreatedBy = 1L,
                            Duration = 27,
                            IsDeleted = false,
                            LocationType = 0,
                            MeetingLink = "https://alan.biz",
                            Name = "quia",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 23, 8, 37, 51, 930, DateTimeKind.Unspecified).AddTicks(2289), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 8L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            CreatedAt = new DateTime(2020, 9, 7, 9, 56, 27, 842, DateTimeKind.Unspecified).AddTicks(5139),
                            CreatedBy = 8L,
                            Duration = 48,
                            IsDeleted = false,
                            LocationType = 0,
                            MeetingLink = "http://dortha.name",
                            Name = "qui",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 12, 5, 37, 23, 156, DateTimeKind.Unspecified).AddTicks(6179), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            CreatedAt = new DateTime(2020, 9, 4, 1, 47, 58, 897, DateTimeKind.Unspecified).AddTicks(8324),
                            CreatedBy = 10L,
                            Duration = 31,
                            IsDeleted = false,
                            LocationType = 2,
                            MeetingLink = "http://dimitri.name",
                            Name = "voluptate",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 20, 11, 21, 19, 206, DateTimeKind.Unspecified).AddTicks(5614), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            CreatedAt = new DateTime(2021, 5, 27, 4, 45, 13, 67, DateTimeKind.Unspecified).AddTicks(7571),
                            CreatedBy = 1L,
                            Duration = 56,
                            IsDeleted = false,
                            LocationType = 0,
                            MeetingLink = "https://jules.com",
                            Name = "nesciunt",
                            StartTime = new DateTimeOffset(new DateTime(2023, 5, 25, 1, 25, 52, 368, DateTimeKind.Unspecified).AddTicks(2355), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            CreatedAt = new DateTime(2020, 9, 24, 6, 10, 0, 75, DateTimeKind.Unspecified).AddTicks(7738),
                            CreatedBy = 4L,
                            Duration = 15,
                            IsDeleted = false,
                            LocationType = 2,
                            MeetingLink = "http://floy.net",
                            Name = "fuga",
                            StartTime = new DateTimeOffset(new DateTime(2022, 8, 25, 18, 24, 56, 87, DateTimeKind.Unspecified).AddTicks(9614), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            CreatedAt = new DateTime(2021, 6, 19, 1, 47, 28, 792, DateTimeKind.Unspecified).AddTicks(1417),
                            CreatedBy = 10L,
                            Duration = 22,
                            IsDeleted = false,
                            LocationType = 0,
                            MeetingLink = "http://loren.org",
                            Name = "libero",
                            StartTime = new DateTimeOffset(new DateTime(2023, 8, 21, 23, 15, 35, 832, DateTimeKind.Unspecified).AddTicks(3672), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.MeetingMember", b =>
                {
                    b.Property<long>("TeamMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.HasKey("TeamMemberId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            QuestionText = "doloremqueAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            QuestionText = "Reprehenderit unde consequatur explicabo. Deserunt aut impedit aut quo. Soluta vitae atque dolores tempore debitis explicabo voluptas. Consequatur optio iste."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            QuestionText = "Quo aut quisquam.\nQuam et quia id veritatis ab.\nBeatae cumque quas voluptatem quia.\nQui velit quibusdam placeat magni et.\nAd et voluptate amet.\nDoloribus esse quos iusto atque ut est nesciunt."
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            QuestionText = "accusantiumAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            QuestionText = "Cupiditate perferendis fuga sunt maiores autem odit alias.\nFugit ea impedit libero sunt modi."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            QuestionText = "doloribusAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            QuestionText = "harumAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            QuestionText = "Esse neque labore dolor.\nSaepe alias inventore aut.\nQuaerat debitis quo velit voluptatem rerum esse vitae."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            QuestionText = "isteAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            QuestionText = "Dolor repudiandae nihil alias asperiores.\nQuis voluptate sit sunt non accusamus qui ut.\nEa et et rerum.\nIpsa voluptate temporibus est sit eius dolor quia explicabo nobis.\nSunt dolore rerum reprehenderit reiciendis ullam.\nVel sapiente necessitatibus."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<bool>("WithTeamMembers")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = -300,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = -660,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 480,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = -420,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 60,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = -540,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 120,
                            WithTeamMembers = true
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 300,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 300,
                            WithTeamMembers = false
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 0L,
                            IsDeleted = false,
                            TimeZone = 240,
                            WithTeamMembers = true
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 2L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 3L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 4L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 5L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 6L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 7L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 1L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 8L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 9L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 10L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 11L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 12L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 13L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 14L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 2L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 15L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 16L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 17L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 18L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 19L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 20L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 21L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 3L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 22L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 23L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 24L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 25L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 26L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 27L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 28L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 4L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 29L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 30L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 31L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 32L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 33L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 34L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 35L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 5L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 36L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 37L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 38L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 39L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 40L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 41L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 42L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 6L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 43L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 44L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 45L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 46L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 47L,
                            End = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 48L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 49L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 7L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 50L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 51L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 52L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 53L,
                            End = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 54L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 55L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 56L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 8L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 57L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 58L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 59L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 60L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 61L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 62L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 63L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 9L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 6
                        },
                        new
                        {
                            Id = 64L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 9, 0, 0, 0),
                            WeekDay = 0
                        },
                        new
                        {
                            Id = 65L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 1
                        },
                        new
                        {
                            Id = 66L,
                            End = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 12, 0, 0, 0),
                            WeekDay = 2
                        },
                        new
                        {
                            Id = 67L,
                            End = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 10, 0, 0, 0),
                            WeekDay = 3
                        },
                        new
                        {
                            Id = 68L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 4
                        },
                        new
                        {
                            Id = 69L,
                            End = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = false,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 8, 0, 0, 0),
                            WeekDay = 5
                        },
                        new
                        {
                            Id = 70L,
                            End = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            IsEnabled = true,
                            ScheduleId = 10L,
                            Start = new TimeSpan(0, 11, 0, 0, 0),
                            WeekDay = 6
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long>("SlotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SlotId");

                    b.ToTable("SlotMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 3,
                            ScheduleId = 1L,
                            SlotId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 2,
                            ScheduleId = 2L,
                            SlotId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 1,
                            ScheduleId = 3L,
                            SlotId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 4,
                            ScheduleId = 4L,
                            SlotId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 9,
                            ScheduleId = 5L,
                            SlotId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 5,
                            ScheduleId = 6L,
                            SlotId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 2,
                            ScheduleId = 7L,
                            SlotId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 4,
                            ScheduleId = 8L,
                            SlotId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 6,
                            ScheduleId = 9L,
                            SlotId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 9,
                            ScheduleId = 10L,
                            SlotId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "reprehenderit",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Breitenberg Inc",
                            PageLink = "http://richard.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Harum soluta vitae atque dolores tempore debitis explicabo.\nBeatae consequatur optio iste qui.\nRepudiandae odit quo aut quisquam et quam.\nQuia id veritatis ab aliquid beatae cumque quas.\nQuia qui qui.\nQuibusdam placeat magni et.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Schowalter - Boyer",
                            PageLink = "http://lamont.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Iusto atque ut est nesciunt non. Accusantium et maxime architecto. Cupiditate perferendis fuga sunt maiores autem odit alias. Fugit ea impedit libero sunt modi.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Gorczany LLC",
                            PageLink = "http://christopher.net",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Esse neque labore dolor.\nSaepe alias inventore aut.\nQuaerat debitis quo velit voluptatem rerum esse vitae.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Frami, Zboncak and Baumbach",
                            PageLink = "http://loren.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Repudiandae nihil alias asperiores nam quis voluptate sit sunt.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Casper LLC",
                            PageLink = "https://laisha.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Sapiente ipsa voluptate temporibus est sit eius dolor quia explicabo.\nVoluptatum sunt dolore rerum reprehenderit reiciendis ullam illo.\nSapiente necessitatibus totam molestias et odit sit mollitia nulla.\nVoluptas et architecto.\nAccusantium aliquam quis quia reiciendis qui est aut.\nEnim est aspernat",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Stroman Group",
                            PageLink = "http://damien.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Architecto sunt ut neque et neque fuga recusandae modi voluptas.\nIn non modi et voluptatem at voluptatem incidunt eaque.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Mosciski - Weber",
                            PageLink = "https://dejah.com",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Alias at nihil nemo voluptatem nam hic soluta.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Smitham Inc",
                            PageLink = "https://junior.info",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Optio impedit qui nemo qui reprehenderit quod consequatur aut. Ut esse ipsa quidem voluptatem omnis delectus recusandae quis dolorum. Vel ut enim hic omnis saepe. In necessitatibus magni perferendis quia asperiores fugiat omnis alias ex. Praesentium delectus earum aut. Porro ut et quia non saepe si",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Willms - Hettinger",
                            PageLink = "https://callie.org",
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Repellendus temporibus quia assumenda modi labore.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Hyatt - Hamill",
                            PageLink = "http://braeden.info",
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasFilter("[Uid] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Albert39@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1239.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Albert Barrows",
                            PhoneNumber = "287.766.04",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Tyrone2@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1236.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Tyrone Gleason",
                            PhoneNumber = "1-259-731-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Flora57@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/808.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Flora Abernathy",
                            PhoneNumber = "489-790-47",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Sonja98@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/186.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Sonja Spinka",
                            PhoneNumber = "392-637-49",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Brittany94@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/851.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Brittany Mueller",
                            PhoneNumber = "(319) 287-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Chelsea_Mertz96@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/954.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Chelsea Mertz",
                            PhoneNumber = "(258) 515-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Clinton.Hayes95@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1101.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Clinton Hayes",
                            PhoneNumber = "(504) 681-",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Randall9@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/481.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Randall Wintheiser",
                            PhoneNumber = "897-873-88",
                            TimeFormat = 0,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 0,
                            Email = "Orlando.Wiza@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/757.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Orlando Wiza",
                            PhoneNumber = "(884) 579-",
                            TimeFormat = 1,
                            TimeZone = 0
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 1,
                            Email = "Leona86@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/790.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Leona Cronin",
                            PhoneNumber = "947.872.74",
                            TimeFormat = 1,
                            TimeZone = 0
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Meeting")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("Meeting")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.Meeting", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.MeetingMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Meeting")
                        .WithMany("MeetingMembers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.TeamMember", "TeamMember")
                        .WithMany("MeetingMembers")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("Schedule")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.Schedule", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ScheduleItem", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.SlotMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("SlotMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Schedule", "Schedule")
                        .WithMany("Members")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("SlotMembers")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings");

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Meeting");

                    b.Navigation("Questions");

                    b.Navigation("Schedule")
                        .IsRequired();

                    b.Navigation("SlotMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("ExternalAttendees");

                    b.Navigation("MeetingMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Schedule", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Navigation("MeetingMembers");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("SlotMembers");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
