// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    partial class EasyMeetsCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<int>("BookingScheduleBlockingTimeMeetingInHours")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("PaddingBeforeMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId")
                        .IsUnique();

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 3,
                            AvailabilitySlotId = 1L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 1,
                            Days = 9,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            PaddingBeforeMeeting = 12,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 3,
                            AvailabilitySlotId = 2L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 4,
                            Days = 12,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            PaddingBeforeMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 1,
                            AvailabilitySlotId = 3L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 1,
                            Days = 3,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            PaddingBeforeMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 2,
                            AvailabilitySlotId = 4L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 3,
                            Days = 14,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            PaddingBeforeMeeting = 13,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 1,
                            AvailabilitySlotId = 5L,
                            BookingScheduleBlockingTimeMeetingInHours = 5,
                            Color = 7,
                            Days = 30,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            PaddingBeforeMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 1,
                            AvailabilitySlotId = 6L,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 4,
                            Days = 30,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 6,
                            PaddingBeforeMeeting = 15,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 3,
                            AvailabilitySlotId = 7L,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 7,
                            Days = 14,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            PaddingBeforeMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 2,
                            AvailabilitySlotId = 8L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 4,
                            Days = 15,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            PaddingBeforeMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 1,
                            AvailabilitySlotId = 9L,
                            BookingScheduleBlockingTimeMeetingInHours = 4,
                            Color = 4,
                            Days = 26,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            PaddingBeforeMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 3,
                            AvailabilitySlotId = 10L,
                            BookingScheduleBlockingTimeMeetingInHours = 1,
                            Color = 5,
                            Days = 29,
                            EndDate = new DateTimeOffset(new DateTime(2022, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            PaddingBeforeMeeting = 3,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdvancedSlotSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvancedSlotSettingsId = 1L,
                            CreatedAt = new DateTime(2019, 10, 11, 19, 24, 52, 990, DateTimeKind.Unspecified).AddTicks(787),
                            CreatedBy = 1L,
                            Description = "Voluptatibus possimus recusandae est non ut dolor porro nulla iure.",
                            Frequency = 15,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://maggie.org",
                            LocationId = 5L,
                            Name = "rerum",
                            Size = 33,
                            TeamId = 10L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            AdvancedSlotSettingsId = 2L,
                            CreatedAt = new DateTime(2020, 3, 17, 11, 5, 35, 774, DateTimeKind.Unspecified).AddTicks(4272),
                            CreatedBy = 2L,
                            Description = "enim",
                            Frequency = 23,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://johnpaul.name",
                            LocationId = 5L,
                            Name = "occaecati",
                            Size = 37,
                            TeamId = 6L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            AdvancedSlotSettingsId = 3L,
                            CreatedAt = new DateTime(2020, 6, 13, 8, 41, 27, 437, DateTimeKind.Unspecified).AddTicks(9984),
                            CreatedBy = 3L,
                            Description = "Dolor quae minus. A vel dolores eos veritatis distinctio veniam aut dolores quas. Distinctio at ut quibusdam velit. Libero accusantium et similique dolorem odit. Qui aut ab eos et delectus provident. Tenetur recusandae quo dolorem unde.",
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://quinton.com",
                            LocationId = 5L,
                            Name = "sint",
                            Size = 22,
                            TeamId = 8L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            AdvancedSlotSettingsId = 4L,
                            CreatedAt = new DateTime(2020, 10, 10, 15, 22, 1, 163, DateTimeKind.Unspecified).AddTicks(193),
                            CreatedBy = 4L,
                            Description = "asperiores",
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://olin.info",
                            LocationId = 1L,
                            Name = "consequatur",
                            Size = 33,
                            TeamId = 10L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            AdvancedSlotSettingsId = 5L,
                            CreatedAt = new DateTime(2019, 9, 30, 3, 53, 36, 554, DateTimeKind.Unspecified).AddTicks(8313),
                            CreatedBy = 5L,
                            Description = "Eligendi enim aperiam inventore. Ipsam iure et minus quas dolores cupiditate expedita esse quasi. Expedita corrupti laboriosam nulla laudantium maiores. Ut aut vel error quos harum fugit ab quibusdam. Consequuntur amet et dolorum est rem.",
                            Frequency = 23,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://johann.biz",
                            LocationId = 5L,
                            Name = "suscipit",
                            Size = 23,
                            TeamId = 9L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            AdvancedSlotSettingsId = 6L,
                            CreatedAt = new DateTime(2019, 9, 27, 3, 38, 26, 472, DateTimeKind.Unspecified).AddTicks(8369),
                            CreatedBy = 6L,
                            Description = "temporibus",
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://gonzalo.org",
                            LocationId = 3L,
                            Name = "et",
                            Size = 24,
                            TeamId = 10L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            AdvancedSlotSettingsId = 7L,
                            CreatedAt = new DateTime(2019, 9, 22, 3, 33, 51, 988, DateTimeKind.Unspecified).AddTicks(5490),
                            CreatedBy = 7L,
                            Description = "dolor",
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://clemmie.com",
                            LocationId = 2L,
                            Name = "reprehenderit",
                            Size = 47,
                            TeamId = 10L,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            AdvancedSlotSettingsId = 8L,
                            CreatedAt = new DateTime(2021, 6, 7, 22, 15, 50, 860, DateTimeKind.Unspecified).AddTicks(7135),
                            CreatedBy = 8L,
                            Description = "Nulla eligendi eum voluptas cum quia sunt fuga. Illo quo aperiam voluptatem tenetur ab. Ullam iure velit doloribus labore distinctio amet doloremque beatae quis.",
                            Frequency = 24,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://buster.biz",
                            LocationId = 1L,
                            Name = "laudantium",
                            Size = 48,
                            TeamId = 2L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            AdvancedSlotSettingsId = 9L,
                            CreatedAt = new DateTime(2020, 11, 16, 22, 12, 33, 737, DateTimeKind.Unspecified).AddTicks(7701),
                            CreatedBy = 9L,
                            Description = "reprehenderit",
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "https://guadalupe.org",
                            LocationId = 4L,
                            Name = "qui",
                            Size = 38,
                            TeamId = 7L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            AdvancedSlotSettingsId = 10L,
                            CreatedAt = new DateTime(2020, 6, 27, 20, 26, 28, 22, DateTimeKind.Unspecified).AddTicks(3493),
                            CreatedBy = 10L,
                            Description = "Officia et aut dolorem omnis et quia sint. Odio et excepturi necessitatibus et nihil. Voluptatem ipsam unde modi qui. Ad illum nostrum et dignissimos ut magnam rem amet omnis. Voluptatibus minus doloremque enim corrupti eum blanditiis.",
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Link = "http://aileen.name",
                            LocationId = 4L,
                            Name = "eveniet",
                            Size = 59,
                            TeamId = 8L,
                            Type = 2,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 29, 21, 17, 30, 360, DateTimeKind.Unspecified).AddTicks(4950),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 20, 1, 30, 5, 200, DateTimeKind.Unspecified).AddTicks(5691),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 3, 2, 8, 2, 47, 723, DateTimeKind.Unspecified).AddTicks(2695),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 8L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 1, 19, 12, 18, 4, 520, DateTimeKind.Unspecified).AddTicks(8303),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 23, 0, 47, 26, 569, DateTimeKind.Unspecified).AddTicks(1104),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 10L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 7, 18, 20, 37, 47, 38, DateTimeKind.Unspecified).AddTicks(532),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 11, 5, 5, 40, 30, 118, DateTimeKind.Unspecified).AddTicks(5045),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 6, 21, 7, 36, 7, 882, DateTimeKind.Unspecified).AddTicks(2068),
                            CreatedBy = 3L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 2, 23, 2, 34, 35, 734, DateTimeKind.Unspecified).AddTicks(5037),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 12, 1, 1, 7, 7, 70, DateTimeKind.Unspecified).AddTicks(6775),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 9L,
                            Email = "Pablo49@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 9, 17, 18, 24, 45, 931, DateTimeKind.Unspecified).AddTicks(3926), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Pablo Runolfsdottir"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 8L,
                            Email = "Leon_Purdy@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 11, 19, 8, 11, 474, DateTimeKind.Unspecified).AddTicks(6298), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Leon Purdy"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 4L,
                            Email = "Lucia_Hirthe64@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 12, 14, 47, 24, 193, DateTimeKind.Unspecified).AddTicks(5126), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Lucia Hirthe"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 5L,
                            Email = "Rochelle_Dibbert71@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 13, 6, 18, 37, 448, DateTimeKind.Unspecified).AddTicks(6189), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rochelle Dibbert"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 9L,
                            Email = "Jimmy74@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 26, 21, 39, 0, 230, DateTimeKind.Unspecified).AddTicks(8573), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jimmy Dickens"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 7L,
                            Email = "Mattie.Leannon17@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 11, 11, 6, 31, 575, DateTimeKind.Unspecified).AddTicks(2446), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Mattie Leannon"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 2L,
                            Email = "Leonard_Kutch@hotmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 19, 13, 42, 9, 67, DateTimeKind.Unspecified).AddTicks(4341), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Leonard Kutch"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 10L,
                            Email = "Pearl90@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 6, 4, 12, 40, 28, 731, DateTimeKind.Unspecified).AddTicks(7203), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Pearl Koepp"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 3L,
                            Email = "Ira52@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 28, 0, 42, 33, 416, DateTimeKind.Unspecified).AddTicks(6088), new TimeSpan(0, 2, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ira Cruickshank"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 6L,
                            Email = "Shirley.Medhurst23@gmail.com",
                            EventTime = new DateTimeOffset(new DateTime(2023, 7, 2, 15, 46, 27, 20, DateTimeKind.Unspecified).AddTicks(5973), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Shirley Medhurst"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 952, DateTimeKind.Unspecified).AddTicks(9939), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 952, DateTimeKind.Unspecified).AddTicks(9839), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(51), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 2L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(43), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(66), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(62), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(78), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 6L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(74), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(89), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(85), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(100), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 9L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(96), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(112), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(108), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(123), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(119), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(134), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(130), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 13, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(144), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 10L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 12, 23, 40, 7, 953, DateTimeKind.Unspecified).AddTicks(141), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Zoom"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "GoogleMeet"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Skype"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Name = "Slack"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2020, 11, 10, 17, 23, 31, 752, DateTimeKind.Unspecified).AddTicks(7984),
                            CreatedBy = 5L,
                            Description = "Mollitia blanditiis sint magni et.",
                            Duration = 18,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "fugiat",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 7, 15, 58, 2, 974, DateTimeKind.Unspecified).AddTicks(9191), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2019, 10, 29, 7, 10, 52, 760, DateTimeKind.Unspecified).AddTicks(921),
                            CreatedBy = 7L,
                            Description = "sit",
                            Duration = 34,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "maxime",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 5, 12, 13, 16, 52, DateTimeKind.Unspecified).AddTicks(180), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2020, 9, 10, 17, 48, 5, 563, DateTimeKind.Unspecified).AddTicks(5178),
                            CreatedBy = 1L,
                            Description = "Soluta deleniti et ut dolore vel occaecati reprehe",
                            Duration = 43,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "ipsam",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 23, 7, 33, 52, 261, DateTimeKind.Unspecified).AddTicks(5533), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2019, 9, 18, 22, 36, 10, 432, DateTimeKind.Unspecified).AddTicks(3802),
                            CreatedBy = 4L,
                            Description = "non",
                            Duration = 18,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "laboriosam",
                            StartTime = new DateTimeOffset(new DateTime(2023, 7, 16, 23, 36, 57, 149, DateTimeKind.Unspecified).AddTicks(4320), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2021, 2, 20, 16, 44, 38, 752, DateTimeKind.Unspecified).AddTicks(4531),
                            CreatedBy = 1L,
                            Description = "eos",
                            Duration = 37,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "repellat",
                            StartTime = new DateTimeOffset(new DateTime(2023, 2, 23, 16, 36, 51, 510, DateTimeKind.Unspecified).AddTicks(8135), new TimeSpan(0, 2, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 11, 11, 19, 48, 50, 909, DateTimeKind.Unspecified).AddTicks(8773),
                            CreatedBy = 1L,
                            Description = "Vitae reiciendis velit illo eaque.",
                            Duration = 26,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "veritatis",
                            StartTime = new DateTimeOffset(new DateTime(2022, 9, 14, 8, 34, 5, 722, DateTimeKind.Unspecified).AddTicks(1448), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2020, 2, 14, 2, 20, 13, 721, DateTimeKind.Unspecified).AddTicks(5674),
                            CreatedBy = 2L,
                            Description = "Voluptatem aliquid ut adipisci optio rerum eum pla",
                            Duration = 12,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "nisi",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 6, 8, 42, 38, 9, DateTimeKind.Unspecified).AddTicks(6306), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 1, 23, 14, 38, 49, 249, DateTimeKind.Unspecified).AddTicks(4856),
                            CreatedBy = 10L,
                            Description = "Vero rerum recusandae totam et. Distinctio quia en",
                            Duration = 29,
                            IsDeleted = false,
                            LocationId = 2L,
                            Name = "ut",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 21, 23, 25, 37, 944, DateTimeKind.Unspecified).AddTicks(4229), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2019, 11, 26, 16, 26, 5, 789, DateTimeKind.Unspecified).AddTicks(2413),
                            CreatedBy = 6L,
                            Description = "Consequuntur ut earum.",
                            Duration = 54,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "sit",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 9, 0, 4, 18, 954, DateTimeKind.Unspecified).AddTicks(7694), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2019, 10, 21, 9, 35, 57, 231, DateTimeKind.Unspecified).AddTicks(1140),
                            CreatedBy = 3L,
                            Description = "Dolore ut tempore dignissimos accusamus et rerum i",
                            Duration = 13,
                            IsDeleted = false,
                            LocationId = 3L,
                            Name = "voluptas",
                            StartTime = new DateTimeOffset(new DateTime(2022, 8, 18, 2, 39, 2, 180, DateTimeKind.Unspecified).AddTicks(1703), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 4L,
                            UpdatedAt = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "doloremqueAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Enim doloribus est quasi.AAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Delectus dolore quasi aut alias delectus dignissimos ut est."
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "eosAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "At temporibus sit nostrum vel est accusantium sit reiciendis accusamus.\nQuo dolorem quod est tempore numquam tempora.\nBlanditiis molestiae tempore tenetur aut quo voluptate assumenda voluptates consequatur.\nA ut consequatur veniam totam at ex aspernatur doloribus.\nQuia fugiat facilis."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "Est quos enim rem nemo commodi nulla dicta delectus esse. Qui est qui dolorum voluptas excepturi delectus excepturi. Voluptatum repellat eos eos eos dignissimos sunt vitae veritatis maiores. Sit omnis libero minus excepturi. Adipisci nihil commodi eveniet quos perspiciatis laborum et veniam temporib"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            Text = "etAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "liberoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Cum qui vitae.AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Quia aut nihil voluptas odit iure. Quasi accusamus consequatur. Sapiente ab reprehenderit qui quasi. Maiores voluptas aut. Aut maxime placeat debitis illo harum natus quia enim a. Recusandae eius enim."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Modi a culpa nisi non molestias voluptas eveniet aspernatur. Iure dolorem ut sapiente. Culpa velit dolor quia reiciendis. Quam sed illum.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Cummerata - Pouros",
                            PageLink = "http://marilyne.biz",
                            TimeZone = "Asia/Colo"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Maiores est numquam voluptates et ex voluptatum numquam distinctio.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Grimes Group",
                            PageLink = "http://nathanial.info",
                            TimeZone = "Asia/Bang"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Nisi in praesentium.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Will LLC",
                            PageLink = "http://luz.org",
                            TimeZone = "Asia/Dhak"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Consequatur omnis in.\nProvident aut quos ab.\nFugit et unde odio commodi.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Herman - Brown",
                            PageLink = "http://penelope.net",
                            TimeZone = "America/R"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "voluptas",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Corwin Inc",
                            PageLink = "http://luther.net",
                            TimeZone = "Asia/Kara"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Itaque laudantium maiores et consequatur.\nDoloremque vel maxime hic quia excepturi.\nExpedita ex qui unde ut laudantium nostrum nisi est.\nDucimus sed ut qui omnis aspernatur beatae voluptas.\nCorporis aut optio necessitatibus fugit et alias.\nAtque error in aut.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Boyer - Mayer",
                            PageLink = "https://elias.name",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Et quasi iusto at qui accusamus.\nVoluptate natus nemo officia molestiae hic possimus.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Weber - Tillman",
                            PageLink = "http://emiliano.biz",
                            TimeZone = "Europe/So"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Quibusdam necessitatibus officia incidunt molestiae ad voluptatem ut debitis.\nMagnam illum perferendis sed quibusdam enim.\nUt aut distinctio fugit error repudiandae.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Block, Hansen and Gulgowski",
                            PageLink = "http://consuelo.net",
                            TimeZone = "Asia/Yere"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Laborum et omnis sequi.\nNumquam nihil aspernatur voluptatibus quia non corrupti odio.\nVoluptatum nostrum consequuntur voluptatem illum.\nQui necessitatibus quis sit fugit similique.\nRerum dolore eum quasi cupiditate omnis magnam architecto aliquam quidem.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Johnson, Doyle and Wolf",
                            PageLink = "http://roxanne.biz",
                            TimeZone = "Africa/Ca"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Odit necessitatibus vel qui impedit rerum commodi.\nNon velit ipsa dolores quo omnis possimus.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Macejkovic and Sons",
                            PageLink = "http://ward.biz",
                            TimeZone = "Asia/Kamc"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 10
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 5
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 9
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 2
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Delbert.Altenwerth78@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/170.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Delbert Altenwerth",
                            PhoneNumber = "(285) 531-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Jeanne16@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/296.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Jeanne Ruecker",
                            PhoneNumber = "1-741-465-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Ted10@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/758.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Ted Mohr",
                            PhoneNumber = "(810) 638-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Amber76@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1202.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Amber Ziemann",
                            PhoneNumber = "1-204-814-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Kelley.OKeefe@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1085.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Kelley O'Keefe",
                            PhoneNumber = "(667) 996-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Bradford_Miller@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/161.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Bradford Miller",
                            PhoneNumber = "360-685-99",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Clayton67@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1092.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Clayton Grady",
                            PhoneNumber = "(671) 649-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Holly87@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/320.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Holly Brakus",
                            PhoneNumber = "365.702.99",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Dexter.Torp@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1247.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Dexter Torp",
                            PhoneNumber = "546-618-14",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Kathy32@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/780.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Kathy Hauck",
                            PhoneNumber = "337-730-04",
                            TimeFormat = 2,
                            TimeZone = 5
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithOne("AdvancedSlotSettings")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("AdvancedSlotSettings")
                        .IsRequired();

                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
