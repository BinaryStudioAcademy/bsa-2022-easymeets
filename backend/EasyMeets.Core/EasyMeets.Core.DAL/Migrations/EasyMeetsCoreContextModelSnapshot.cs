// <auto-generated />
using System;
using EasyMeets.Core.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMeets.Core.DAL.Migrations
{
    [DbContext(typeof(EasyMeetsCoreContext))]
    partial class EasyMeetsCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfBookings")
                        .HasColumnType("int");

                    b.Property<int>("MinBookingMeetingDifference")
                        .HasColumnType("int");

                    b.Property<int>("PaddingMeeting")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AdvancedSlotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ActivityType = 3,
                            Color = 3,
                            Days = 21,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 1,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            ActivityType = 2,
                            Color = 5,
                            Days = 19,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            ActivityType = 2,
                            Color = 5,
                            Days = 6,
                            IsDeleted = false,
                            MaxNumberOfBookings = 9,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 11,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            ActivityType = 2,
                            Color = 1,
                            Days = 2,
                            IsDeleted = false,
                            MaxNumberOfBookings = 3,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 4,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            ActivityType = 2,
                            Color = 7,
                            Days = 10,
                            IsDeleted = false,
                            MaxNumberOfBookings = 4,
                            MinBookingMeetingDifference = 2,
                            PaddingMeeting = 10,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            ActivityType = 1,
                            Color = 2,
                            Days = 29,
                            IsDeleted = false,
                            MaxNumberOfBookings = 2,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 8,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            ActivityType = 1,
                            Color = 5,
                            Days = 25,
                            IsDeleted = false,
                            MaxNumberOfBookings = 1,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 14,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            ActivityType = 2,
                            Color = 8,
                            Days = 18,
                            IsDeleted = false,
                            MaxNumberOfBookings = 8,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 2,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            ActivityType = 2,
                            Color = 4,
                            Days = 30,
                            IsDeleted = false,
                            MaxNumberOfBookings = 7,
                            MinBookingMeetingDifference = 5,
                            PaddingMeeting = 5,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            ActivityType = 3,
                            Color = 5,
                            Days = 4,
                            IsDeleted = false,
                            MaxNumberOfBookings = 10,
                            MinBookingMeetingDifference = 1,
                            PaddingMeeting = 9,
                            StartDate = new DateTimeOffset(new DateTime(2022, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AdvancedSlotSettingsId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowToAddGuests")
                        .HasColumnType("bit");

                    b.Property<int>("BookingsPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordProtection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TimeZoneVisibility")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WelcomeMessage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedSlotSettingsId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("AvailabilitySlots");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdvancedSlotSettingsId = 1L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 8, 21, 0, 32, 4, 504, DateTimeKind.Unspecified).AddTicks(1503),
                            CreatedBy = 1L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://bertha.info",
                            LocationId = 1L,
                            Name = "consequatur",
                            Size = 39,
                            TeamId = 6L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Velit saepe officiis tenetur nisi quia at earum."
                        },
                        new
                        {
                            Id = 2L,
                            AdvancedSlotSettingsId = 2L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 3,
                            CreatedAt = new DateTime(2021, 5, 1, 6, 25, 7, 495, DateTimeKind.Unspecified).AddTicks(9112),
                            CreatedBy = 2L,
                            Frequency = 28,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://drew.com",
                            LocationId = 3L,
                            Name = "nisi",
                            Size = 37,
                            TeamId = 10L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "A quae rerum officiis aut minima vitae nihil et.\nQuis dolorem ut aut officia et consequuntur id."
                        },
                        new
                        {
                            Id = 3L,
                            AdvancedSlotSettingsId = 3L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 2,
                            CreatedAt = new DateTime(2020, 2, 5, 7, 45, 21, 719, DateTimeKind.Unspecified).AddTicks(327),
                            CreatedBy = 3L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://athena.net",
                            LocationId = 4L,
                            Name = "ut",
                            Size = 52,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Consequatur sunt modi quis eveniet sunt rerum voluptatem a quod. Corrupti enim ad voluptatum dolores aliquam quia quam occaecati. Quam placeat consectetur."
                        },
                        new
                        {
                            Id = 4L,
                            AdvancedSlotSettingsId = 4L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 10, 4, 11, 2, 55, 647, DateTimeKind.Unspecified).AddTicks(5182),
                            CreatedBy = 4L,
                            Frequency = 29,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://marianna.biz",
                            LocationId = 5L,
                            Name = "et",
                            Size = 20,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "voluptates"
                        },
                        new
                        {
                            Id = 5L,
                            AdvancedSlotSettingsId = 5L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2021, 7, 10, 10, 45, 47, 535, DateTimeKind.Unspecified).AddTicks(4969),
                            CreatedBy = 5L,
                            Frequency = 19,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://frank.com",
                            LocationId = 4L,
                            Name = "molestias",
                            Size = 32,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "aut"
                        },
                        new
                        {
                            Id = 6L,
                            AdvancedSlotSettingsId = 6L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 1,
                            CreatedAt = new DateTime(2021, 7, 6, 11, 46, 55, 522, DateTimeKind.Unspecified).AddTicks(3684),
                            CreatedBy = 6L,
                            Frequency = 21,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://jaquan.biz",
                            LocationId = 3L,
                            Name = "itaque",
                            Size = 48,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Sunt consectetur qui accusamus numquam.\nVoluptas sit ratione laboriosam nemo temporibus excepturi et eius.\nIste aliquam culpa dolores vel dignissimos sunt.\nEt esse labore."
                        },
                        new
                        {
                            Id = 7L,
                            AdvancedSlotSettingsId = 7L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2019, 8, 3, 1, 7, 43, 968, DateTimeKind.Unspecified).AddTicks(6157),
                            CreatedBy = 7L,
                            Frequency = 22,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://garland.net",
                            LocationId = 5L,
                            Name = "rerum",
                            Size = 55,
                            TeamId = 9L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Excepturi soluta autem.\nSed rerum voluptatem."
                        },
                        new
                        {
                            Id = 8L,
                            AdvancedSlotSettingsId = 8L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2021, 1, 18, 7, 48, 44, 739, DateTimeKind.Unspecified).AddTicks(738),
                            CreatedBy = 8L,
                            Frequency = 20,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "https://alden.info",
                            LocationId = 5L,
                            Name = "mollitia",
                            Size = 36,
                            TeamId = 4L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Expedita laudantium quia minus autem a qui commodi vitae."
                        },
                        new
                        {
                            Id = 9L,
                            AdvancedSlotSettingsId = 9L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 5,
                            CreatedAt = new DateTime(2020, 11, 28, 20, 42, 22, 639, DateTimeKind.Unspecified).AddTicks(7216),
                            CreatedBy = 9L,
                            Frequency = 26,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://corene.org",
                            LocationId = 3L,
                            Name = "illo",
                            Size = 39,
                            TeamId = 5L,
                            TimeZoneVisibility = true,
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Possimus culpa aperiam ut magnam quo aliquam quisquam officiis."
                        },
                        new
                        {
                            Id = 10L,
                            AdvancedSlotSettingsId = 10L,
                            AllowToAddGuests = true,
                            BookingsPerDay = 4,
                            CreatedAt = new DateTime(2020, 8, 11, 9, 24, 56, 313, DateTimeKind.Unspecified).AddTicks(3053),
                            CreatedBy = 10L,
                            Frequency = 16,
                            IsDeleted = false,
                            IsEnabled = true,
                            IsVisible = true,
                            Language = "Ukrainian",
                            Link = "http://eryn.info",
                            LocationId = 3L,
                            Name = "molestiae",
                            Size = 58,
                            TeamId = 7L,
                            TimeZoneVisibility = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            WelcomeMessage = "Inventore veniam ut molestiae laborum possimus amet et culpa quae.\nDolorem perferendis est voluptatem et doloribus.\nIusto possimus quidem dicta at."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AddEventsFromTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckForConflicts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddEventsFromTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 11, 8, 12, 49, 46, 697, DateTimeKind.Unspecified).AddTicks(4393),
                            CreatedBy = 6L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 2L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 28, 1, 42, 13, 233, DateTimeKind.Unspecified).AddTicks(2975),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            AddEventsFromTeamId = 1L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 12, 9, 12, 8, 2, 60, DateTimeKind.Unspecified).AddTicks(5001),
                            CreatedBy = 7L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 4L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 7, 19, 1, 17, 2, 99, DateTimeKind.Unspecified).AddTicks(1048),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 9L
                        },
                        new
                        {
                            Id = 5L,
                            AddEventsFromTeamId = 9L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 10, 15, 1, 9, 57, 208, DateTimeKind.Unspecified).AddTicks(5372),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AddEventsFromTeamId = 6L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2019, 9, 8, 11, 19, 31, 33, DateTimeKind.Unspecified).AddTicks(4977),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            AddEventsFromTeamId = 4L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2021, 1, 8, 11, 54, 56, 479, DateTimeKind.Unspecified).AddTicks(8932),
                            CreatedBy = 5L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            AddEventsFromTeamId = 3L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 5, 16, 0, 12, 21, 966, DateTimeKind.Unspecified).AddTicks(6186),
                            CreatedBy = 8L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            AddEventsFromTeamId = 2L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 10, 22, 9, 42, 37, 430, DateTimeKind.Unspecified).AddTicks(8721),
                            CreatedBy = 2L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            AddEventsFromTeamId = 5L,
                            CheckForConflicts = false,
                            CreatedAt = new DateTime(2020, 5, 18, 16, 55, 56, 763, DateTimeKind.Unspecified).AddTicks(8794),
                            CreatedBy = 9L,
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeamId");

                    b.ToTable("CalendarVisibleForTeams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CalendarId = 1L,
                            IsDeleted = false,
                            TeamId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CalendarId = 2L,
                            IsDeleted = false,
                            TeamId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CalendarId = 3L,
                            IsDeleted = false,
                            TeamId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CalendarId = 4L,
                            IsDeleted = false,
                            TeamId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CalendarId = 5L,
                            IsDeleted = false,
                            TeamId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CalendarId = 6L,
                            IsDeleted = false,
                            TeamId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CalendarId = 7L,
                            IsDeleted = false,
                            TeamId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CalendarId = 8L,
                            IsDeleted = false,
                            TeamId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CalendarId = 9L,
                            IsDeleted = false,
                            TeamId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CalendarId = 10L,
                            IsDeleted = false,
                            TeamId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("ExternalAttendees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 6L,
                            Email = "Don.Hayes@yahoo.comAAAAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 7, 21, 39, 58, 681, DateTimeKind.Unspecified).AddTicks(2517), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Don Hayes"
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 1L,
                            Email = "Chad_Botsford0@yahoo.comAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 23, 1, 42, 14, 790, DateTimeKind.Unspecified).AddTicks(3353), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Chad Botsford"
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 6L,
                            Email = "Tabitha.Miller@gmail.comAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 2, 4, 2, 44, 22, 693, DateTimeKind.Unspecified).AddTicks(2042), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Tabitha Miller"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 10L,
                            Email = "John.Grady@hotmail.comAAAAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 8, 7, 21, 30, 42, 253, DateTimeKind.Unspecified).AddTicks(7518), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "John Grady"
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 10L,
                            Email = "Alfred.Runolfsdottir@yahoo.com",
                            EventTime = new DateTimeOffset(new DateTime(2022, 9, 1, 1, 13, 14, 216, DateTimeKind.Unspecified).AddTicks(8202), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Alfred Runolfsdottir"
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 8L,
                            Email = "Sophia.Macejkovic69@gmail.comA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 1, 13, 6, 27, 12, 104, DateTimeKind.Unspecified).AddTicks(9572), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Sophia Macejkovic"
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 10L,
                            Email = "Allison_Conroy63@yahoo.comAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 10, 14, 15, 9, 20, 451, DateTimeKind.Unspecified).AddTicks(7772), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Allison Conroy"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 9L,
                            Email = "Jeannette_Mueller@gmail.comAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 4, 4, 15, 44, 27, 737, DateTimeKind.Unspecified).AddTicks(5685), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Jeannette Mueller"
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            Email = "Manuel.Beatty@hotmail.comAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2023, 5, 31, 4, 23, 17, 559, DateTimeKind.Unspecified).AddTicks(6278), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Manuel Beatty"
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 2L,
                            Email = "Michele_Kutch20@yahoo.comAAAAA",
                            EventTime = new DateTimeOffset(new DateTime(2022, 11, 24, 7, 56, 39, 716, DateTimeKind.Unspecified).AddTicks(3032), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Michele Kutch"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("EndEvent")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalAttendeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartEvent")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExternalAttendeeId");

                    b.ToTable("ExternalAttendeeAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7113), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7067), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7198), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 5L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7194), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7209), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7207), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7216), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 4L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7214), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7269), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 8L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7266), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7278), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7276), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7285), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 1L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7292), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 3L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7290), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7299), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7297), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10L,
                            EndEvent = new DateTimeOffset(new DateTime(2022, 8, 17, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7305), new TimeSpan(0, 3, 0, 0, 0)),
                            ExternalAttendeeId = 7L,
                            IsDeleted = false,
                            StartEvent = new DateTimeOffset(new DateTime(2022, 8, 16, 12, 22, 34, 161, DateTimeKind.Unspecified).AddTicks(7304), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Zoom"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "GoogleMeet"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Skype"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Name = "Slack"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2021, 2, 2, 3, 10, 5, 659, DateTimeKind.Unspecified).AddTicks(9171),
                            CreatedBy = 7L,
                            Description = "Expedita velit cupiditate quo blanditiis eius id e",
                            Duration = 26,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "vel",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 9, 10, 55, 5, 624, DateTimeKind.Unspecified).AddTicks(4952), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2019, 12, 25, 17, 28, 23, 142, DateTimeKind.Unspecified).AddTicks(8372),
                            CreatedBy = 2L,
                            Description = "Culpa alias et reiciendis.\nImpedit et minima occae",
                            Duration = 56,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "at",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 4, 9, 18, 36, 658, DateTimeKind.Unspecified).AddTicks(7674), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 1L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2019, 11, 25, 15, 24, 35, 829, DateTimeKind.Unspecified).AddTicks(7543),
                            CreatedBy = 4L,
                            Description = "corrupti",
                            Duration = 21,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "et",
                            StartTime = new DateTimeOffset(new DateTime(2023, 3, 3, 17, 58, 19, 210, DateTimeKind.Unspecified).AddTicks(745), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 3L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2020, 2, 2, 11, 33, 21, 675, DateTimeKind.Unspecified).AddTicks(8342),
                            CreatedBy = 6L,
                            Description = "distinctio",
                            Duration = 57,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "nulla",
                            StartTime = new DateTimeOffset(new DateTime(2023, 4, 21, 21, 21, 48, 392, DateTimeKind.Unspecified).AddTicks(4270), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 5L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2019, 11, 17, 2, 16, 44, 607, DateTimeKind.Unspecified).AddTicks(7869),
                            CreatedBy = 5L,
                            Description = "quis",
                            Duration = 59,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "et",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 6, 3, 37, 58, 836, DateTimeKind.Unspecified).AddTicks(7790), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2020, 3, 12, 18, 11, 49, 581, DateTimeKind.Unspecified).AddTicks(5853),
                            CreatedBy = 5L,
                            Description = "Ut amet dolore facere et qui dolorem.\nSunt volupta",
                            Duration = 12,
                            IsDeleted = false,
                            LocationId = 4L,
                            Name = "sit",
                            StartTime = new DateTimeOffset(new DateTime(2022, 10, 20, 10, 11, 53, 891, DateTimeKind.Unspecified).AddTicks(9247), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 9L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2021, 1, 18, 1, 20, 33, 281, DateTimeKind.Unspecified).AddTicks(9777),
                            CreatedBy = 10L,
                            Description = "Voluptas dolorem sint.",
                            Duration = 43,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "ducimus",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 23, 2, 35, 9, 235, DateTimeKind.Unspecified).AddTicks(9436), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2021, 1, 30, 23, 22, 56, 562, DateTimeKind.Unspecified).AddTicks(4167),
                            CreatedBy = 3L,
                            Description = "velit",
                            Duration = 49,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "autem",
                            StartTime = new DateTimeOffset(new DateTime(2023, 6, 27, 5, 39, 41, 585, DateTimeKind.Unspecified).AddTicks(9454), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 10L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2020, 9, 11, 5, 2, 14, 730, DateTimeKind.Unspecified).AddTicks(7018),
                            CreatedBy = 7L,
                            Description = "Perferendis error nemo tempore perspiciatis.\nEnim",
                            Duration = 28,
                            IsDeleted = false,
                            LocationId = 1L,
                            Name = "temporibus",
                            StartTime = new DateTimeOffset(new DateTime(2023, 1, 16, 8, 18, 6, 115, DateTimeKind.Unspecified).AddTicks(7169), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 2L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2020, 10, 22, 11, 8, 49, 534, DateTimeKind.Unspecified).AddTicks(9945),
                            CreatedBy = 4L,
                            Description = "Quaerat et aut. Iure et tempore dolor sed libero e",
                            Duration = 46,
                            IsDeleted = false,
                            LocationId = 5L,
                            Name = "maiores",
                            StartTime = new DateTimeOffset(new DateTime(2022, 11, 11, 9, 10, 55, 163, DateTimeKind.Unspecified).AddTicks(5964), new TimeSpan(0, 3, 0, 0, 0)),
                            TeamId = 6L,
                            UpdatedAt = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Sint itaque ducimus.\nEt velit voluptatem qui magnam mollitia.\nEst error deleniti."
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            Text = "Consequatur corrupti laudantium repudiandae quo mollitia."
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            Text = "iustoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            Text = "Aliquam quia et corporis ullam voluptas molestiae.\nEst iure est.\nOfficiis fugiat quos iste ut voluptas necessitatibus sunt quia.\nEst sint recusandae laboriosam in non autem."
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            Text = "Accusamus unde dolor neque. Eveniet aut tenetur nihil vero. Ea dignissimos aliquam voluptatem alias sunt assumenda cum molestiae corrupti. Quibusdam expedita et tenetur quisquam voluptas dolore similique veritatis impedit."
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Esse reiciendis labore aut consequatur consequatur eum ut quis id.\nSit recusandae voluptatem mollitia quod provident.\nUt odio eius officia est in cum perferendis qui modi.\nAdipisci qui a tempora."
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            Text = "A sed omnis in sed vel. A rem quidem reiciendis quia et at recusandae. Recusandae magnam voluptates blanditiis aut sint porro fugiat est. Voluptates mollitia necessitatibus sit libero consequatur laboriosam ipsa. Eius in ut nostrum pariatur dicta labore ut. Consectetur voluptas qui sed ut ea molliti"
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            Text = "Voluptas ad vel sunt qui vel eum rem sed tenetur. Quo labore deleniti doloribus sunt neque. Deleniti consequatur omnis. Reprehenderit corporis recusandae explicabo."
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            Text = "Alias vitae minus modi commodi sit ullam.\nNumquam et iure rerum ipsum.\nNon qui ipsam deleniti sed.\nQuia ut similique necessitatibus sint quia pariatur deleniti.\nOmnis iusto pariatur vero."
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            Text = "Nostrum dolore adipisci sed ex eos deserunt dolorem iure."
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PageLink")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Reiciendis debitis molestias est rem illum sit impedit. Vitae velit non reprehenderit perspiciatis nobis facere quia consequuntur. Sint vel quis architecto exercitationem repudiandae ipsam.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Klein Inc",
                            PageLink = "https://sherman.net",
                            TimeZone = "Pacific/A"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "enim",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Langosh, Graham and Thiel",
                            PageLink = "http://green.biz",
                            TimeZone = "America/L"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Voluptate rerum deleniti exercitationem placeat voluptatum possimus est facilis autem. Vitae eum officia consequatur sed quo esse laborum perspiciatis ut. Blanditiis ut ad quae hic cupiditate voluptatem.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Bergnaum and Sons",
                            PageLink = "https://holly.info",
                            TimeZone = "America/D"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Ullam natus ut et ipsam voluptas harum et.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Adams, Lueilwitz and Hauck",
                            PageLink = "https://hettie.net",
                            TimeZone = "Europe/Li"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Vel magnam veritatis sit non. Dolor non quis corrupti eum ipsa rerum quam sunt esse. Animi harum modi reiciendis tenetur est. Dolore aliquam totam eligendi recusandae occaecati deleniti sint.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Kshlerin - Padberg",
                            PageLink = "https://destany.name",
                            TimeZone = "Etc/UTC"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Quia recusandae qui sit non dolorem.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Barton, Pfannerstill and Shields",
                            PageLink = "https://evan.biz",
                            TimeZone = "Asia/Bang"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Molestiae sed vel aspernatur sunt qui.\nUt dolorum consequatur aperiam.\nConsequatur nihil molestiae.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Jones - Windler",
                            PageLink = "https://chadd.net",
                            TimeZone = "Europe/Mo"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Aspernatur sunt neque.\nEst minima magnam rerum similique deserunt minima.\nNihil officiis alias adipisci commodi voluptates.",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Hand, Mohr and Walsh",
                            PageLink = "http://bo.biz",
                            TimeZone = "America/G"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "eligendi",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Purdy - White",
                            PageLink = "https://khalid.name",
                            TimeZone = "Europe/Br"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "esse",
                            IsDeleted = false,
                            LogoPath = "",
                            Name = "Weimann - Shields",
                            PageLink = "http://colin.net",
                            TimeZone = "Pacific/M"
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 2L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 3L,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 2,
                            TeamId = 4L,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 5L,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 1,
                            TeamId = 6L,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Role = 2,
                            Status = 2,
                            TeamId = 7L,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 8L,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 9L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            Role = 1,
                            Status = 1,
                            TeamId = 10L,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMemberMeetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            IsDeleted = false,
                            MemberId = 1L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 2L,
                            EventId = 2L,
                            IsDeleted = false,
                            MemberId = 2L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 3L,
                            EventId = 3L,
                            IsDeleted = false,
                            MemberId = 3L,
                            Priority = 6
                        },
                        new
                        {
                            Id = 4L,
                            EventId = 4L,
                            IsDeleted = false,
                            MemberId = 4L,
                            Priority = 1
                        },
                        new
                        {
                            Id = 5L,
                            EventId = 5L,
                            IsDeleted = false,
                            MemberId = 5L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 6L,
                            EventId = 6L,
                            IsDeleted = false,
                            MemberId = 6L,
                            Priority = 8
                        },
                        new
                        {
                            Id = 7L,
                            EventId = 7L,
                            IsDeleted = false,
                            MemberId = 7L,
                            Priority = 3
                        },
                        new
                        {
                            Id = 8L,
                            EventId = 8L,
                            IsDeleted = false,
                            MemberId = 8L,
                            Priority = 7
                        },
                        new
                        {
                            Id = 9L,
                            EventId = 9L,
                            IsDeleted = false,
                            MemberId = 9L,
                            Priority = 4
                        },
                        new
                        {
                            Id = 10L,
                            EventId = 10L,
                            IsDeleted = false,
                            MemberId = 10L,
                            Priority = 5
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<int>("DateFormat")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.Property<int?>("TimeZone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Dewey.Thiel@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1229.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Dewey Thiel",
                            PhoneNumber = "422.765.91",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 2L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Lyle55@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/201.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Lyle Parisian",
                            PhoneNumber = "(736) 994-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 3L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Max52@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1179.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Max Thompson",
                            PhoneNumber = "1-876-525-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 4L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Tracy_Ziemann37@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/894.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Tracy Ziemann",
                            PhoneNumber = "240.233.83",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 5L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Lowell_Bashirian@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/510.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Lowell Bashirian",
                            PhoneNumber = "498.777.22",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 6L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Patty.Emard33@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/311.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Patty Emard",
                            PhoneNumber = "565-753-66",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 7L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Shannon.Rogahn91@yahoo.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/204.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Shannon Rogahn",
                            PhoneNumber = "809-678-54",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 8L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Wilfred.Streich@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/684.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Wilfred Streich",
                            PhoneNumber = "1-996-452-",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 9L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Randall_Ankunding@hotmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/441.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Randall Ankunding",
                            PhoneNumber = "211-206-32",
                            TimeFormat = 2,
                            TimeZone = 5
                        },
                        new
                        {
                            Id = 10L,
                            Country = 1,
                            DateFormat = 2,
                            Email = "Joyce.Douglas@gmail.com",
                            ImagePath = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/185.jpg",
                            IsBanned = false,
                            IsDeleted = false,
                            Language = 2,
                            Name = "Joyce Douglas",
                            PhoneNumber = "293-220-34",
                            TimeFormat = 2,
                            TimeZone = 5
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AvailabilitySlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSlot");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvailabilitySlotId = 1L,
                            IsDeleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AvailabilitySlotId = 2L,
                            IsDeleted = false,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AvailabilitySlotId = 3L,
                            IsDeleted = false,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AvailabilitySlotId = 4L,
                            IsDeleted = false,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AvailabilitySlotId = 5L,
                            IsDeleted = false,
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AvailabilitySlotId = 6L,
                            IsDeleted = false,
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AvailabilitySlotId = 7L,
                            IsDeleted = false,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AvailabilitySlotId = 8L,
                            IsDeleted = false,
                            UserId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AvailabilitySlotId = 9L,
                            IsDeleted = false,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AvailabilitySlotId = 10L,
                            IsDeleted = false,
                            UserId = 10L
                        });
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", "AdvancedSlotSettings")
                        .WithOne("AvailabilitySlot")
                        .HasForeignKey("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AdvancedSlotSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedSlots")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvancedSlotSettings");

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "ImportEventsFromTeam")
                        .WithMany("ExportEventsToCalendars")
                        .HasForeignKey("AddEventsFromTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportEventsFromTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.CalendarVisibleForTeam", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Calendar", "Calendar")
                        .WithMany("VisibleForTeams")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("VisibleCalendars")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("ExternalAttendees")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendeeAvailability", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.ExternalAttendee", "ExternalAttendee")
                        .WithMany("ExternalAttendeeAvailabilities")
                        .HasForeignKey("ExternalAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAttendee");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "Author")
                        .WithMany("CreatedMeetings")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Location", "Location")
                        .WithMany("Meetings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("Meetings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Question", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Questions")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMember", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.TeamMemberMeeting", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.Meeting", "Event")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("TeamMeetings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.UserSlot", b =>
                {
                    b.HasOne("EasyMeets.Core.DAL.Entities.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany("Members")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyMeets.Core.DAL.Entities.User", "User")
                        .WithMany("Slots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AdvancedSlotSettings", b =>
                {
                    b.Navigation("AvailabilitySlot")
                        .IsRequired();
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.AvailabilitySlot", b =>
                {
                    b.Navigation("ExternalAttendees");

                    b.Navigation("Members");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Calendar", b =>
                {
                    b.Navigation("VisibleForTeams");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.ExternalAttendee", b =>
                {
                    b.Navigation("ExternalAttendeeAvailabilities");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Location", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("TeamMeetings");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.Team", b =>
                {
                    b.Navigation("AvailabilitySlots");

                    b.Navigation("ExportEventsToCalendars");

                    b.Navigation("Meetings");

                    b.Navigation("TeamMembers");

                    b.Navigation("VisibleCalendars");
                });

            modelBuilder.Entity("EasyMeets.Core.DAL.Entities.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CreatedMeetings");

                    b.Navigation("CreatedSlots");

                    b.Navigation("Slots");

                    b.Navigation("TeamMeetings");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
